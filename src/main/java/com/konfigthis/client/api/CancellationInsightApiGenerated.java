/*
 * Production
 * Baremetrics provides real-time subscription metrics for teams built with Stripe, Shopify Partners, Braintree, Recurly, Chargebee, Google Play, and App Store Connect.   In addition to metrics, Baremetrics provides tools that help you reduce churn and grow your business faster:   Recover: Prevent failed charges and keep your hard-earned revenue with our 100% automated toolkit.   Cancellation insights: Learn exactly why your customers cancel, calculate lost revenue by cancellation reason, and send automated emails to win customers back.  Flightpath: Plan for the future with flexible financial modeling tools built for growing SaaS companies.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CancellationInsightCreateNewReasonRequest;
import com.konfigthis.client.model.CancellationInsightCreateNewReasonResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CancellationInsightApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CancellationInsightApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CancellationInsightApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewReasonCall(CancellationInsightCreateNewReasonRequest cancellationInsightCreateNewReasonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancellationInsightCreateNewReasonRequest;

        // create path and map variables
        String localVarPath = "/v1/cancellation_insights/reasons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewReasonValidateBeforeCall(CancellationInsightCreateNewReasonRequest cancellationInsightCreateNewReasonRequest, final ApiCallback _callback) throws ApiException {
        return createNewReasonCall(cancellationInsightCreateNewReasonRequest, _callback);

    }


    private ApiResponse<CancellationInsightCreateNewReasonResponse> createNewReasonWithHttpInfo(CancellationInsightCreateNewReasonRequest cancellationInsightCreateNewReasonRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewReasonValidateBeforeCall(cancellationInsightCreateNewReasonRequest, null);
        Type localVarReturnType = new TypeToken<CancellationInsightCreateNewReasonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewReasonAsync(CancellationInsightCreateNewReasonRequest cancellationInsightCreateNewReasonRequest, final ApiCallback<CancellationInsightCreateNewReasonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewReasonValidateBeforeCall(cancellationInsightCreateNewReasonRequest, _callback);
        Type localVarReturnType = new TypeToken<CancellationInsightCreateNewReasonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewReasonRequestBuilder {
        private final String text;
        private Integer sortKey;

        private CreateNewReasonRequestBuilder(String text) {
            this.text = text;
        }

        /**
         * Set sortKey
         * @param sortKey  (optional)
         * @return CreateNewReasonRequestBuilder
         */
        public CreateNewReasonRequestBuilder sortKey(Integer sortKey) {
            this.sortKey = sortKey;
            return this;
        }
        
        /**
         * Build call for createNewReason
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CancellationInsightCreateNewReasonRequest cancellationInsightCreateNewReasonRequest = buildBodyParams();
            return createNewReasonCall(cancellationInsightCreateNewReasonRequest, _callback);
        }

        private CancellationInsightCreateNewReasonRequest buildBodyParams() {
            CancellationInsightCreateNewReasonRequest cancellationInsightCreateNewReasonRequest = new CancellationInsightCreateNewReasonRequest();
            cancellationInsightCreateNewReasonRequest.text(this.text);
            cancellationInsightCreateNewReasonRequest.sortKey(this.sortKey);
            return cancellationInsightCreateNewReasonRequest;
        }

        /**
         * Execute createNewReason request
         * @return CancellationInsightCreateNewReasonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CancellationInsightCreateNewReasonResponse execute() throws ApiException {
            CancellationInsightCreateNewReasonRequest cancellationInsightCreateNewReasonRequest = buildBodyParams();
            ApiResponse<CancellationInsightCreateNewReasonResponse> localVarResp = createNewReasonWithHttpInfo(cancellationInsightCreateNewReasonRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewReason request with HTTP info returned
         * @return ApiResponse&lt;CancellationInsightCreateNewReasonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CancellationInsightCreateNewReasonResponse> executeWithHttpInfo() throws ApiException {
            CancellationInsightCreateNewReasonRequest cancellationInsightCreateNewReasonRequest = buildBodyParams();
            return createNewReasonWithHttpInfo(cancellationInsightCreateNewReasonRequest);
        }

        /**
         * Execute createNewReason request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CancellationInsightCreateNewReasonResponse> _callback) throws ApiException {
            CancellationInsightCreateNewReasonRequest cancellationInsightCreateNewReasonRequest = buildBodyParams();
            return createNewReasonAsync(cancellationInsightCreateNewReasonRequest, _callback);
        }
    }

    /**
     * Create Reason
     * 
     * @return CreateNewReasonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewReasonRequestBuilder createNewReason(String text) throws IllegalArgumentException {
        if (text == null) throw new IllegalArgumentException("\"text\" is required but got null");
            

        return new CreateNewReasonRequestBuilder(text);
    }
}
