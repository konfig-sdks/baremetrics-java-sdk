/*
 * Production
 * Baremetrics provides real-time subscription metrics for teams built with Stripe, Shopify Partners, Braintree, Recurly, Chargebee, Google Play, and App Store Connect.   In addition to metrics, Baremetrics provides tools that help you reduce churn and grow your business faster:   Recover: Prevent failed charges and keep your hard-earned revenue with our 100% automated toolkit.   Cancellation insights: Learn exactly why your customers cancel, calculate lost revenue by cancellation reason, and send automated emails to win customers back.  Flightpath: Plan for the future with flexible financial modeling tools built for growing SaaS companies.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EventCreateInsightEventRequest;
import com.konfigthis.client.model.EventCreateInsightEventResponse;
import com.konfigthis.client.model.EventGetEventByIdResponse;
import com.konfigthis.client.model.EventListCancellationInsightEventsResponse;
import com.konfigthis.client.model.EventUpdateEventByIdRequest;
import com.konfigthis.client.model.EventUpdateEventByIdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EventApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EventApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createInsightEventCall(EventCreateInsightEventRequest eventCreateInsightEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventCreateInsightEventRequest;

        // create path and map variables
        String localVarPath = "/v1/cancellation_insights/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInsightEventValidateBeforeCall(EventCreateInsightEventRequest eventCreateInsightEventRequest, final ApiCallback _callback) throws ApiException {
        return createInsightEventCall(eventCreateInsightEventRequest, _callback);

    }


    private ApiResponse<EventCreateInsightEventResponse> createInsightEventWithHttpInfo(EventCreateInsightEventRequest eventCreateInsightEventRequest) throws ApiException {
        okhttp3.Call localVarCall = createInsightEventValidateBeforeCall(eventCreateInsightEventRequest, null);
        Type localVarReturnType = new TypeToken<EventCreateInsightEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createInsightEventAsync(EventCreateInsightEventRequest eventCreateInsightEventRequest, final ApiCallback<EventCreateInsightEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInsightEventValidateBeforeCall(eventCreateInsightEventRequest, _callback);
        Type localVarReturnType = new TypeToken<EventCreateInsightEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateInsightEventRequestBuilder {
        private final String reasonId;
        private String comment;
        private String customerOid;
        private List<String> subscriptionOids;

        private CreateInsightEventRequestBuilder(String reasonId) {
            this.reasonId = reasonId;
        }

        /**
         * Set comment
         * @param comment  (optional)
         * @return CreateInsightEventRequestBuilder
         */
        public CreateInsightEventRequestBuilder comment(String comment) {
            this.comment = comment;
            return this;
        }
        
        /**
         * Set customerOid
         * @param customerOid  (optional)
         * @return CreateInsightEventRequestBuilder
         */
        public CreateInsightEventRequestBuilder customerOid(String customerOid) {
            this.customerOid = customerOid;
            return this;
        }
        
        /**
         * Set subscriptionOids
         * @param subscriptionOids  (optional)
         * @return CreateInsightEventRequestBuilder
         */
        public CreateInsightEventRequestBuilder subscriptionOids(List<String> subscriptionOids) {
            this.subscriptionOids = subscriptionOids;
            return this;
        }
        
        /**
         * Build call for createInsightEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EventCreateInsightEventRequest eventCreateInsightEventRequest = buildBodyParams();
            return createInsightEventCall(eventCreateInsightEventRequest, _callback);
        }

        private EventCreateInsightEventRequest buildBodyParams() {
            EventCreateInsightEventRequest eventCreateInsightEventRequest = new EventCreateInsightEventRequest();
            eventCreateInsightEventRequest.reasonId(this.reasonId);
            eventCreateInsightEventRequest.comment(this.comment);
            eventCreateInsightEventRequest.customerOid(this.customerOid);
            eventCreateInsightEventRequest.subscriptionOids(this.subscriptionOids);
            return eventCreateInsightEventRequest;
        }

        /**
         * Execute createInsightEvent request
         * @return EventCreateInsightEventResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public EventCreateInsightEventResponse execute() throws ApiException {
            EventCreateInsightEventRequest eventCreateInsightEventRequest = buildBodyParams();
            ApiResponse<EventCreateInsightEventResponse> localVarResp = createInsightEventWithHttpInfo(eventCreateInsightEventRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createInsightEvent request with HTTP info returned
         * @return ApiResponse&lt;EventCreateInsightEventResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventCreateInsightEventResponse> executeWithHttpInfo() throws ApiException {
            EventCreateInsightEventRequest eventCreateInsightEventRequest = buildBodyParams();
            return createInsightEventWithHttpInfo(eventCreateInsightEventRequest);
        }

        /**
         * Execute createInsightEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventCreateInsightEventResponse> _callback) throws ApiException {
            EventCreateInsightEventRequest eventCreateInsightEventRequest = buildBodyParams();
            return createInsightEventAsync(eventCreateInsightEventRequest, _callback);
        }
    }

    /**
     * Create Event
     * 
     * @return CreateInsightEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateInsightEventRequestBuilder createInsightEvent(String reasonId) throws IllegalArgumentException {
        if (reasonId == null) throw new IllegalArgumentException("\"reasonId\" is required but got null");
            

        return new CreateInsightEventRequestBuilder(reasonId);
    }
    private okhttp3.Call getEventByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cancellation_insights/events/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEventById(Async)");
        }

        return getEventByIdCall(id, _callback);

    }


    private ApiResponse<EventGetEventByIdResponse> getEventByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getEventByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EventGetEventByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEventByIdAsync(String id, final ApiCallback<EventGetEventByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EventGetEventByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEventByIdRequestBuilder {
        private final String id;

        private GetEventByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getEventById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEventByIdCall(id, _callback);
        }


        /**
         * Execute getEventById request
         * @return EventGetEventByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public EventGetEventByIdResponse execute() throws ApiException {
            ApiResponse<EventGetEventByIdResponse> localVarResp = getEventByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEventById request with HTTP info returned
         * @return ApiResponse&lt;EventGetEventByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventGetEventByIdResponse> executeWithHttpInfo() throws ApiException {
            return getEventByIdWithHttpInfo(id);
        }

        /**
         * Execute getEventById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventGetEventByIdResponse> _callback) throws ApiException {
            return getEventByIdAsync(id, _callback);
        }
    }

    /**
     * Show Event
     * 
     * @param id  (required)
     * @return GetEventByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetEventByIdRequestBuilder getEventById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetEventByIdRequestBuilder(id);
    }
    private okhttp3.Call listCancellationInsightEventsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cancellation_insights/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCancellationInsightEventsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listCancellationInsightEventsCall(_callback);

    }


    private ApiResponse<EventListCancellationInsightEventsResponse> listCancellationInsightEventsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listCancellationInsightEventsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EventListCancellationInsightEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCancellationInsightEventsAsync(final ApiCallback<EventListCancellationInsightEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCancellationInsightEventsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EventListCancellationInsightEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCancellationInsightEventsRequestBuilder {

        private ListCancellationInsightEventsRequestBuilder() {
        }

        /**
         * Build call for listCancellationInsightEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCancellationInsightEventsCall(_callback);
        }


        /**
         * Execute listCancellationInsightEvents request
         * @return EventListCancellationInsightEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public EventListCancellationInsightEventsResponse execute() throws ApiException {
            ApiResponse<EventListCancellationInsightEventsResponse> localVarResp = listCancellationInsightEventsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCancellationInsightEvents request with HTTP info returned
         * @return ApiResponse&lt;EventListCancellationInsightEventsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventListCancellationInsightEventsResponse> executeWithHttpInfo() throws ApiException {
            return listCancellationInsightEventsWithHttpInfo();
        }

        /**
         * Execute listCancellationInsightEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventListCancellationInsightEventsResponse> _callback) throws ApiException {
            return listCancellationInsightEventsAsync(_callback);
        }
    }

    /**
     * List Events
     * 
     * @return ListCancellationInsightEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListCancellationInsightEventsRequestBuilder listCancellationInsightEvents() throws IllegalArgumentException {
        return new ListCancellationInsightEventsRequestBuilder();
    }
    private okhttp3.Call updateEventByIdCall(String id, EventUpdateEventByIdRequest eventUpdateEventByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventUpdateEventByIdRequest;

        // create path and map variables
        String localVarPath = "/v1/cancellation_insights/events/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEventByIdValidateBeforeCall(String id, EventUpdateEventByIdRequest eventUpdateEventByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateEventById(Async)");
        }

        return updateEventByIdCall(id, eventUpdateEventByIdRequest, _callback);

    }


    private ApiResponse<EventUpdateEventByIdResponse> updateEventByIdWithHttpInfo(String id, EventUpdateEventByIdRequest eventUpdateEventByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEventByIdValidateBeforeCall(id, eventUpdateEventByIdRequest, null);
        Type localVarReturnType = new TypeToken<EventUpdateEventByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEventByIdAsync(String id, EventUpdateEventByIdRequest eventUpdateEventByIdRequest, final ApiCallback<EventUpdateEventByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEventByIdValidateBeforeCall(id, eventUpdateEventByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<EventUpdateEventByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEventByIdRequestBuilder {
        private final String id;
        private String reasonId;
        private String comment;

        private UpdateEventByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set reasonId
         * @param reasonId  (optional)
         * @return UpdateEventByIdRequestBuilder
         */
        public UpdateEventByIdRequestBuilder reasonId(String reasonId) {
            this.reasonId = reasonId;
            return this;
        }
        
        /**
         * Set comment
         * @param comment  (optional)
         * @return UpdateEventByIdRequestBuilder
         */
        public UpdateEventByIdRequestBuilder comment(String comment) {
            this.comment = comment;
            return this;
        }
        
        /**
         * Build call for updateEventById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EventUpdateEventByIdRequest eventUpdateEventByIdRequest = buildBodyParams();
            return updateEventByIdCall(id, eventUpdateEventByIdRequest, _callback);
        }

        private EventUpdateEventByIdRequest buildBodyParams() {
            EventUpdateEventByIdRequest eventUpdateEventByIdRequest = new EventUpdateEventByIdRequest();
            eventUpdateEventByIdRequest.reasonId(this.reasonId);
            eventUpdateEventByIdRequest.comment(this.comment);
            return eventUpdateEventByIdRequest;
        }

        /**
         * Execute updateEventById request
         * @return EventUpdateEventByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public EventUpdateEventByIdResponse execute() throws ApiException {
            EventUpdateEventByIdRequest eventUpdateEventByIdRequest = buildBodyParams();
            ApiResponse<EventUpdateEventByIdResponse> localVarResp = updateEventByIdWithHttpInfo(id, eventUpdateEventByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEventById request with HTTP info returned
         * @return ApiResponse&lt;EventUpdateEventByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventUpdateEventByIdResponse> executeWithHttpInfo() throws ApiException {
            EventUpdateEventByIdRequest eventUpdateEventByIdRequest = buildBodyParams();
            return updateEventByIdWithHttpInfo(id, eventUpdateEventByIdRequest);
        }

        /**
         * Execute updateEventById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventUpdateEventByIdResponse> _callback) throws ApiException {
            EventUpdateEventByIdRequest eventUpdateEventByIdRequest = buildBodyParams();
            return updateEventByIdAsync(id, eventUpdateEventByIdRequest, _callback);
        }
    }

    /**
     * Update Event
     * 
     * @param id  (required)
     * @return UpdateEventByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEventByIdRequestBuilder updateEventById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateEventByIdRequestBuilder(id);
    }
}
