/*
 * Production
 * Baremetrics provides real-time subscription metrics for teams built with Stripe, Shopify Partners, Braintree, Recurly, Chargebee, Google Play, and App Store Connect.   In addition to metrics, Baremetrics provides tools that help you reduce churn and grow your business faster:   Recover: Prevent failed charges and keep your hard-earned revenue with our 100% automated toolkit.   Cancellation insights: Learn exactly why your customers cancel, calculate lost revenue by cancellation reason, and send automated emails to win customers back.  Flightpath: Plan for the future with flexible financial modeling tools built for growing SaaS companies.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.MetricShowCohortsResponseInner;
import com.konfigthis.client.model.MetricShowDetailsResponse;
import com.konfigthis.client.model.MetricShowPlanBreakoutResponse;
import com.konfigthis.client.model.MetricShowSummaryResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MetricApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetricApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MetricApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listCustomersCall(LocalDate startDate, LocalDate endDate, String metric, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/metrics/{metric}/customers"
            .replace("{" + "metric" + "}", localVarApiClient.escapeString(metric.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCustomersValidateBeforeCall(LocalDate startDate, LocalDate endDate, String metric, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling listCustomers(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling listCustomers(Async)");
        }

        // verify the required parameter 'metric' is set
        if (metric == null) {
            throw new ApiException("Missing the required parameter 'metric' when calling listCustomers(Async)");
        }

        return listCustomersCall(startDate, endDate, metric, _callback);

    }


    private ApiResponse<String> listCustomersWithHttpInfo(LocalDate startDate, LocalDate endDate, String metric) throws ApiException {
        okhttp3.Call localVarCall = listCustomersValidateBeforeCall(startDate, endDate, metric, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCustomersAsync(LocalDate startDate, LocalDate endDate, String metric, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCustomersValidateBeforeCall(startDate, endDate, metric, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCustomersRequestBuilder {
        private final LocalDate startDate;
        private final LocalDate endDate;
        private final String metric;

        private ListCustomersRequestBuilder(LocalDate startDate, LocalDate endDate, String metric) {
            this.startDate = startDate;
            this.endDate = endDate;
            this.metric = metric;
        }

        /**
         * Build call for listCustomers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCustomersCall(startDate, endDate, metric, _callback);
        }


        /**
         * Execute listCustomers request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = listCustomersWithHttpInfo(startDate, endDate, metric);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCustomers request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return listCustomersWithHttpInfo(startDate, endDate, metric);
        }

        /**
         * Execute listCustomers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return listCustomersAsync(startDate, endDate, metric, _callback);
        }
    }

    /**
     * Show Customers
     * Returns a list of customers that make up this metric. For example, the upgrades metric will return all customers who have upgraded within the selected range. You can also see their MRR contribution.
     * @param startDate  (required)
     * @param endDate  (required)
     * @param metric You can see a list of available metrics [here](https://developers.baremetrics.com/reference/introduction) (required)
     * @return ListCustomersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListCustomersRequestBuilder listCustomers(LocalDate startDate, LocalDate endDate, String metric) throws IllegalArgumentException {
        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
        if (metric == null) throw new IllegalArgumentException("\"metric\" is required but got null");
            

        return new ListCustomersRequestBuilder(startDate, endDate, metric);
    }
    private okhttp3.Call showCohortsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/metrics/cohorts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showCohortsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return showCohortsCall(_callback);

    }


    private ApiResponse<List<MetricShowCohortsResponseInner>> showCohortsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = showCohortsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<MetricShowCohortsResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showCohortsAsync(final ApiCallback<List<MetricShowCohortsResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = showCohortsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<MetricShowCohortsResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShowCohortsRequestBuilder {

        private ShowCohortsRequestBuilder() {
        }

        /**
         * Build call for showCohorts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showCohortsCall(_callback);
        }


        /**
         * Execute showCohorts request
         * @return List&lt;MetricShowCohortsResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public List<MetricShowCohortsResponseInner> execute() throws ApiException {
            ApiResponse<List<MetricShowCohortsResponseInner>> localVarResp = showCohortsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showCohorts request with HTTP info returned
         * @return ApiResponse&lt;List&lt;MetricShowCohortsResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<MetricShowCohortsResponseInner>> executeWithHttpInfo() throws ApiException {
            return showCohortsWithHttpInfo();
        }

        /**
         * Execute showCohorts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<MetricShowCohortsResponseInner>> _callback) throws ApiException {
            return showCohortsAsync(_callback);
        }
    }

    /**
     * Show Cohorts
     * 
     * @return ShowCohortsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ShowCohortsRequestBuilder showCohorts() throws IllegalArgumentException {
        return new ShowCohortsRequestBuilder();
    }
    private okhttp3.Call showDetailsCall(String metric, LocalDate startDate, LocalDate endDate, Integer compareTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/metrics/{metric}"
            .replace("{" + "metric" + "}", localVarApiClient.escapeString(metric.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (compareTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("compare_to", compareTo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showDetailsValidateBeforeCall(String metric, LocalDate startDate, LocalDate endDate, Integer compareTo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'metric' is set
        if (metric == null) {
            throw new ApiException("Missing the required parameter 'metric' when calling showDetails(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling showDetails(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling showDetails(Async)");
        }

        return showDetailsCall(metric, startDate, endDate, compareTo, _callback);

    }


    private ApiResponse<MetricShowDetailsResponse> showDetailsWithHttpInfo(String metric, LocalDate startDate, LocalDate endDate, Integer compareTo) throws ApiException {
        okhttp3.Call localVarCall = showDetailsValidateBeforeCall(metric, startDate, endDate, compareTo, null);
        Type localVarReturnType = new TypeToken<MetricShowDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showDetailsAsync(String metric, LocalDate startDate, LocalDate endDate, Integer compareTo, final ApiCallback<MetricShowDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = showDetailsValidateBeforeCall(metric, startDate, endDate, compareTo, _callback);
        Type localVarReturnType = new TypeToken<MetricShowDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShowDetailsRequestBuilder {
        private final String metric;
        private final LocalDate startDate;
        private final LocalDate endDate;
        private Integer compareTo;

        private ShowDetailsRequestBuilder(String metric, LocalDate startDate, LocalDate endDate) {
            this.metric = metric;
            this.startDate = startDate;
            this.endDate = endDate;
        }

        /**
         * Set compareTo
         * @param compareTo The number of days ago to compare results to (optional, default to 30)
         * @return ShowDetailsRequestBuilder
         */
        public ShowDetailsRequestBuilder compareTo(Integer compareTo) {
            this.compareTo = compareTo;
            return this;
        }
        
        /**
         * Build call for showDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showDetailsCall(metric, startDate, endDate, compareTo, _callback);
        }


        /**
         * Execute showDetails request
         * @return MetricShowDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public MetricShowDetailsResponse execute() throws ApiException {
            ApiResponse<MetricShowDetailsResponse> localVarResp = showDetailsWithHttpInfo(metric, startDate, endDate, compareTo);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showDetails request with HTTP info returned
         * @return ApiResponse&lt;MetricShowDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MetricShowDetailsResponse> executeWithHttpInfo() throws ApiException {
            return showDetailsWithHttpInfo(metric, startDate, endDate, compareTo);
        }

        /**
         * Execute showDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MetricShowDetailsResponse> _callback) throws ApiException {
            return showDetailsAsync(metric, startDate, endDate, compareTo, _callback);
        }
    }

    /**
     * Show Metric
     * 
     * @param metric You can see a list of available metrics [here](https://developers.baremetrics.com/reference/introduction) (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @return ShowDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ShowDetailsRequestBuilder showDetails(String metric, LocalDate startDate, LocalDate endDate) throws IllegalArgumentException {
        if (metric == null) throw new IllegalArgumentException("\"metric\" is required but got null");
            

        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
        return new ShowDetailsRequestBuilder(metric, startDate, endDate);
    }
    private okhttp3.Call showPlanBreakoutCall(LocalDate startDate, LocalDate endDate, String metric, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/metrics/{metric}/plans"
            .replace("{" + "metric" + "}", localVarApiClient.escapeString(metric.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showPlanBreakoutValidateBeforeCall(LocalDate startDate, LocalDate endDate, String metric, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling showPlanBreakout(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling showPlanBreakout(Async)");
        }

        // verify the required parameter 'metric' is set
        if (metric == null) {
            throw new ApiException("Missing the required parameter 'metric' when calling showPlanBreakout(Async)");
        }

        return showPlanBreakoutCall(startDate, endDate, metric, _callback);

    }


    private ApiResponse<MetricShowPlanBreakoutResponse> showPlanBreakoutWithHttpInfo(LocalDate startDate, LocalDate endDate, String metric) throws ApiException {
        okhttp3.Call localVarCall = showPlanBreakoutValidateBeforeCall(startDate, endDate, metric, null);
        Type localVarReturnType = new TypeToken<MetricShowPlanBreakoutResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showPlanBreakoutAsync(LocalDate startDate, LocalDate endDate, String metric, final ApiCallback<MetricShowPlanBreakoutResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = showPlanBreakoutValidateBeforeCall(startDate, endDate, metric, _callback);
        Type localVarReturnType = new TypeToken<MetricShowPlanBreakoutResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShowPlanBreakoutRequestBuilder {
        private final LocalDate startDate;
        private final LocalDate endDate;
        private final String metric;

        private ShowPlanBreakoutRequestBuilder(LocalDate startDate, LocalDate endDate, String metric) {
            this.startDate = startDate;
            this.endDate = endDate;
            this.metric = metric;
        }

        /**
         * Build call for showPlanBreakout
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showPlanBreakoutCall(startDate, endDate, metric, _callback);
        }


        /**
         * Execute showPlanBreakout request
         * @return MetricShowPlanBreakoutResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public MetricShowPlanBreakoutResponse execute() throws ApiException {
            ApiResponse<MetricShowPlanBreakoutResponse> localVarResp = showPlanBreakoutWithHttpInfo(startDate, endDate, metric);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showPlanBreakout request with HTTP info returned
         * @return ApiResponse&lt;MetricShowPlanBreakoutResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MetricShowPlanBreakoutResponse> executeWithHttpInfo() throws ApiException {
            return showPlanBreakoutWithHttpInfo(startDate, endDate, metric);
        }

        /**
         * Execute showPlanBreakout request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MetricShowPlanBreakoutResponse> _callback) throws ApiException {
            return showPlanBreakoutAsync(startDate, endDate, metric, _callback);
        }
    }

    /**
     * Show Plan Breakout
     * This allows you to break down a metric by plan, across a date range
     * @param startDate  (required)
     * @param endDate  (required)
     * @param metric You can see a list of available metrics [here](https://developers.baremetrics.com/reference/introduction) (required)
     * @return ShowPlanBreakoutRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ShowPlanBreakoutRequestBuilder showPlanBreakout(LocalDate startDate, LocalDate endDate, String metric) throws IllegalArgumentException {
        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
        if (metric == null) throw new IllegalArgumentException("\"metric\" is required but got null");
            

        return new ShowPlanBreakoutRequestBuilder(startDate, endDate, metric);
    }
    private okhttp3.Call showSummaryCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/metrics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showSummaryValidateBeforeCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling showSummary(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling showSummary(Async)");
        }

        return showSummaryCall(startDate, endDate, _callback);

    }


    private ApiResponse<MetricShowSummaryResponse> showSummaryWithHttpInfo(String startDate, String endDate) throws ApiException {
        okhttp3.Call localVarCall = showSummaryValidateBeforeCall(startDate, endDate, null);
        Type localVarReturnType = new TypeToken<MetricShowSummaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showSummaryAsync(String startDate, String endDate, final ApiCallback<MetricShowSummaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = showSummaryValidateBeforeCall(startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<MetricShowSummaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShowSummaryRequestBuilder {
        private final String startDate;
        private final String endDate;

        private ShowSummaryRequestBuilder(String startDate, String endDate) {
            this.startDate = startDate;
            this.endDate = endDate;
        }

        /**
         * Build call for showSummary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showSummaryCall(startDate, endDate, _callback);
        }


        /**
         * Execute showSummary request
         * @return MetricShowSummaryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public MetricShowSummaryResponse execute() throws ApiException {
            ApiResponse<MetricShowSummaryResponse> localVarResp = showSummaryWithHttpInfo(startDate, endDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showSummary request with HTTP info returned
         * @return ApiResponse&lt;MetricShowSummaryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MetricShowSummaryResponse> executeWithHttpInfo() throws ApiException {
            return showSummaryWithHttpInfo(startDate, endDate);
        }

        /**
         * Execute showSummary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MetricShowSummaryResponse> _callback) throws ApiException {
            return showSummaryAsync(startDate, endDate, _callback);
        }
    }

    /**
     * Show Summary
     * 
     * @param startDate  (required)
     * @param endDate  (required)
     * @return ShowSummaryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ShowSummaryRequestBuilder showSummary(String startDate, String endDate) throws IllegalArgumentException {
        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
            

        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
            

        return new ShowSummaryRequestBuilder(startDate, endDate);
    }
}
