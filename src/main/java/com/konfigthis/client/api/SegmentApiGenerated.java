/*
 * Production
 * Baremetrics provides real-time subscription metrics for teams built with Stripe, Shopify Partners, Braintree, Recurly, Chargebee, Google Play, and App Store Connect.   In addition to metrics, Baremetrics provides tools that help you reduce churn and grow your business faster:   Recover: Prevent failed charges and keep your hard-earned revenue with our 100% automated toolkit.   Cancellation insights: Learn exactly why your customers cancel, calculate lost revenue by cancellation reason, and send automated emails to win customers back.  Flightpath: Plan for the future with flexible financial modeling tools built for growing SaaS companies.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.SegmentCreateRequestRequest;
import com.konfigthis.client.model.SegmentCreateRequestRequestQueryInner;
import com.konfigthis.client.model.SegmentCreateRequestResponse;
import com.konfigthis.client.model.SegmentFindWithoutSaveRequest;
import com.konfigthis.client.model.SegmentFindWithoutSaveResponse;
import com.konfigthis.client.model.SegmentGetFieldsResponse;
import com.konfigthis.client.model.SegmentListSegmentsResponse;
import com.konfigthis.client.model.SegmentShowDetailsResponse;
import com.konfigthis.client.model.SegmentUpdateByIdRequest;
import com.konfigthis.client.model.SegmentUpdateByIdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SegmentApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SegmentApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SegmentApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createRequestCall(SegmentCreateRequestRequest segmentCreateRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = segmentCreateRequestRequest;

        // create path and map variables
        String localVarPath = "/v1/segments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRequestValidateBeforeCall(SegmentCreateRequestRequest segmentCreateRequestRequest, final ApiCallback _callback) throws ApiException {
        return createRequestCall(segmentCreateRequestRequest, _callback);

    }


    private ApiResponse<SegmentCreateRequestResponse> createRequestWithHttpInfo(SegmentCreateRequestRequest segmentCreateRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = createRequestValidateBeforeCall(segmentCreateRequestRequest, null);
        Type localVarReturnType = new TypeToken<SegmentCreateRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRequestAsync(SegmentCreateRequestRequest segmentCreateRequestRequest, final ApiCallback<SegmentCreateRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRequestValidateBeforeCall(segmentCreateRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<SegmentCreateRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestRequestBuilder {
        private final List<SegmentCreateRequestRequestQueryInner> query;
        private String name;

        private CreateRequestRequestBuilder(List<SegmentCreateRequestRequestQueryInner> query) {
            this.query = query;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for createRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SegmentCreateRequestRequest segmentCreateRequestRequest = buildBodyParams();
            return createRequestCall(segmentCreateRequestRequest, _callback);
        }

        private SegmentCreateRequestRequest buildBodyParams() {
            SegmentCreateRequestRequest segmentCreateRequestRequest = new SegmentCreateRequestRequest();
            segmentCreateRequestRequest.query(this.query);
            segmentCreateRequestRequest.name(this.name);
            return segmentCreateRequestRequest;
        }

        /**
         * Execute createRequest request
         * @return SegmentCreateRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SegmentCreateRequestResponse execute() throws ApiException {
            SegmentCreateRequestRequest segmentCreateRequestRequest = buildBodyParams();
            ApiResponse<SegmentCreateRequestResponse> localVarResp = createRequestWithHttpInfo(segmentCreateRequestRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRequest request with HTTP info returned
         * @return ApiResponse&lt;SegmentCreateRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SegmentCreateRequestResponse> executeWithHttpInfo() throws ApiException {
            SegmentCreateRequestRequest segmentCreateRequestRequest = buildBodyParams();
            return createRequestWithHttpInfo(segmentCreateRequestRequest);
        }

        /**
         * Execute createRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SegmentCreateRequestResponse> _callback) throws ApiException {
            SegmentCreateRequestRequest segmentCreateRequestRequest = buildBodyParams();
            return createRequestAsync(segmentCreateRequestRequest, _callback);
        }
    }

    /**
     * Create Segment
     * 
     * @return CreateRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestRequestBuilder createRequest(List<SegmentCreateRequestRequestQueryInner> query) throws IllegalArgumentException {
        if (query == null) throw new IllegalArgumentException("\"query\" is required but got null");
        return new CreateRequestRequestBuilder(query);
    }
    private okhttp3.Call findWithoutSaveCall(Integer perPage, Integer page, String sort, String order, SegmentFindWithoutSaveRequest segmentFindWithoutSaveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = segmentFindWithoutSaveRequest;

        // create path and map variables
        String localVarPath = "/v1/segments/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findWithoutSaveValidateBeforeCall(Integer perPage, Integer page, String sort, String order, SegmentFindWithoutSaveRequest segmentFindWithoutSaveRequest, final ApiCallback _callback) throws ApiException {
        return findWithoutSaveCall(perPage, page, sort, order, segmentFindWithoutSaveRequest, _callback);

    }


    private ApiResponse<SegmentFindWithoutSaveResponse> findWithoutSaveWithHttpInfo(Integer perPage, Integer page, String sort, String order, SegmentFindWithoutSaveRequest segmentFindWithoutSaveRequest) throws ApiException {
        okhttp3.Call localVarCall = findWithoutSaveValidateBeforeCall(perPage, page, sort, order, segmentFindWithoutSaveRequest, null);
        Type localVarReturnType = new TypeToken<SegmentFindWithoutSaveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findWithoutSaveAsync(Integer perPage, Integer page, String sort, String order, SegmentFindWithoutSaveRequest segmentFindWithoutSaveRequest, final ApiCallback<SegmentFindWithoutSaveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = findWithoutSaveValidateBeforeCall(perPage, page, sort, order, segmentFindWithoutSaveRequest, _callback);
        Type localVarReturnType = new TypeToken<SegmentFindWithoutSaveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindWithoutSaveRequestBuilder {
        private final List<SegmentCreateRequestRequestQueryInner> query;
        private Integer perPage;
        private Integer page;
        private String sort;
        private String order;

        private FindWithoutSaveRequestBuilder(List<SegmentCreateRequestRequestQueryInner> query) {
            this.query = query;
        }

        /**
         * Set perPage
         * @param perPage  (optional, default to 30)
         * @return FindWithoutSaveRequestBuilder
         */
        public FindWithoutSaveRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional, default to 0)
         * @return FindWithoutSaveRequestBuilder
         */
        public FindWithoutSaveRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set sort
         * @param sort  (optional, default to created)
         * @return FindWithoutSaveRequestBuilder
         */
        public FindWithoutSaveRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order  (optional, default to asc)
         * @return FindWithoutSaveRequestBuilder
         */
        public FindWithoutSaveRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for findWithoutSave
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SegmentFindWithoutSaveRequest segmentFindWithoutSaveRequest = buildBodyParams();
            return findWithoutSaveCall(perPage, page, sort, order, segmentFindWithoutSaveRequest, _callback);
        }

        private SegmentFindWithoutSaveRequest buildBodyParams() {
            SegmentFindWithoutSaveRequest segmentFindWithoutSaveRequest = new SegmentFindWithoutSaveRequest();
            segmentFindWithoutSaveRequest.query(this.query);
            return segmentFindWithoutSaveRequest;
        }

        /**
         * Execute findWithoutSave request
         * @return SegmentFindWithoutSaveResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SegmentFindWithoutSaveResponse execute() throws ApiException {
            SegmentFindWithoutSaveRequest segmentFindWithoutSaveRequest = buildBodyParams();
            ApiResponse<SegmentFindWithoutSaveResponse> localVarResp = findWithoutSaveWithHttpInfo(perPage, page, sort, order, segmentFindWithoutSaveRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findWithoutSave request with HTTP info returned
         * @return ApiResponse&lt;SegmentFindWithoutSaveResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SegmentFindWithoutSaveResponse> executeWithHttpInfo() throws ApiException {
            SegmentFindWithoutSaveRequest segmentFindWithoutSaveRequest = buildBodyParams();
            return findWithoutSaveWithHttpInfo(perPage, page, sort, order, segmentFindWithoutSaveRequest);
        }

        /**
         * Execute findWithoutSave request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SegmentFindWithoutSaveResponse> _callback) throws ApiException {
            SegmentFindWithoutSaveRequest segmentFindWithoutSaveRequest = buildBodyParams();
            return findWithoutSaveAsync(perPage, page, sort, order, segmentFindWithoutSaveRequest, _callback);
        }
    }

    /**
     * Search Segment
     * Search for a segment without saving it
     * @return FindWithoutSaveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public FindWithoutSaveRequestBuilder findWithoutSave(List<SegmentCreateRequestRequestQueryInner> query) throws IllegalArgumentException {
        if (query == null) throw new IllegalArgumentException("\"query\" is required but got null");
        return new FindWithoutSaveRequestBuilder(query);
    }
    private okhttp3.Call getFieldsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/segments/fields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFieldsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getFieldsCall(_callback);

    }


    private ApiResponse<SegmentGetFieldsResponse> getFieldsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getFieldsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SegmentGetFieldsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFieldsAsync(final ApiCallback<SegmentGetFieldsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFieldsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SegmentGetFieldsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFieldsRequestBuilder {

        private GetFieldsRequestBuilder() {
        }

        /**
         * Build call for getFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFieldsCall(_callback);
        }


        /**
         * Execute getFields request
         * @return SegmentGetFieldsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SegmentGetFieldsResponse execute() throws ApiException {
            ApiResponse<SegmentGetFieldsResponse> localVarResp = getFieldsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFields request with HTTP info returned
         * @return ApiResponse&lt;SegmentGetFieldsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SegmentGetFieldsResponse> executeWithHttpInfo() throws ApiException {
            return getFieldsWithHttpInfo();
        }

        /**
         * Execute getFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SegmentGetFieldsResponse> _callback) throws ApiException {
            return getFieldsAsync(_callback);
        }
    }

    /**
     * List Fields
     * Returns the fields that can be used to create/search a segment. The key is the category, and a category contains multiple fields.
     * @return GetFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetFieldsRequestBuilder getFields() throws IllegalArgumentException {
        return new GetFieldsRequestBuilder();
    }
    private okhttp3.Call listSegmentsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/segments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSegmentsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listSegmentsCall(_callback);

    }


    private ApiResponse<SegmentListSegmentsResponse> listSegmentsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listSegmentsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SegmentListSegmentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSegmentsAsync(final ApiCallback<SegmentListSegmentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSegmentsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SegmentListSegmentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSegmentsRequestBuilder {

        private ListSegmentsRequestBuilder() {
        }

        /**
         * Build call for listSegments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSegmentsCall(_callback);
        }


        /**
         * Execute listSegments request
         * @return SegmentListSegmentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SegmentListSegmentsResponse execute() throws ApiException {
            ApiResponse<SegmentListSegmentsResponse> localVarResp = listSegmentsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSegments request with HTTP info returned
         * @return ApiResponse&lt;SegmentListSegmentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SegmentListSegmentsResponse> executeWithHttpInfo() throws ApiException {
            return listSegmentsWithHttpInfo();
        }

        /**
         * Execute listSegments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SegmentListSegmentsResponse> _callback) throws ApiException {
            return listSegmentsAsync(_callback);
        }
    }

    /**
     * List Segments
     * 
     * @return ListSegmentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListSegmentsRequestBuilder listSegments() throws IllegalArgumentException {
        return new ListSegmentsRequestBuilder();
    }
    private okhttp3.Call removeByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/segments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeById(Async)");
        }

        return removeByIdCall(id, _callback);

    }


    private ApiResponse<Object> removeByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeByIdAsync(String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String id;

        private RemoveByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(id, _callback);
        }


        /**
         * Execute removeById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(id);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeByIdAsync(id, _callback);
        }
    }

    /**
     * Delete Segment
     * 
     * @param id  (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RemoveByIdRequestBuilder(id);
    }
    private okhttp3.Call showDetailsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/segments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showDetailsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showDetails(Async)");
        }

        return showDetailsCall(id, _callback);

    }


    private ApiResponse<SegmentShowDetailsResponse> showDetailsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = showDetailsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SegmentShowDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showDetailsAsync(String id, final ApiCallback<SegmentShowDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = showDetailsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SegmentShowDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShowDetailsRequestBuilder {
        private final String id;

        private ShowDetailsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for showDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showDetailsCall(id, _callback);
        }


        /**
         * Execute showDetails request
         * @return SegmentShowDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SegmentShowDetailsResponse execute() throws ApiException {
            ApiResponse<SegmentShowDetailsResponse> localVarResp = showDetailsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showDetails request with HTTP info returned
         * @return ApiResponse&lt;SegmentShowDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SegmentShowDetailsResponse> executeWithHttpInfo() throws ApiException {
            return showDetailsWithHttpInfo(id);
        }

        /**
         * Execute showDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SegmentShowDetailsResponse> _callback) throws ApiException {
            return showDetailsAsync(id, _callback);
        }
    }

    /**
     * Show Segment
     * 
     * @param id  (required)
     * @return ShowDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ShowDetailsRequestBuilder showDetails(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ShowDetailsRequestBuilder(id);
    }
    private okhttp3.Call updateByIdCall(String id, SegmentUpdateByIdRequest segmentUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = segmentUpdateByIdRequest;

        // create path and map variables
        String localVarPath = "/v1/segments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(String id, SegmentUpdateByIdRequest segmentUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateById(Async)");
        }

        return updateByIdCall(id, segmentUpdateByIdRequest, _callback);

    }


    private ApiResponse<SegmentUpdateByIdResponse> updateByIdWithHttpInfo(String id, SegmentUpdateByIdRequest segmentUpdateByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, segmentUpdateByIdRequest, null);
        Type localVarReturnType = new TypeToken<SegmentUpdateByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByIdAsync(String id, SegmentUpdateByIdRequest segmentUpdateByIdRequest, final ApiCallback<SegmentUpdateByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, segmentUpdateByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<SegmentUpdateByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final String id;
        private String name;
        private List<SegmentCreateRequestRequestQueryInner> query;

        private UpdateByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set query
         * @param query  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder query(List<SegmentCreateRequestRequestQueryInner> query) {
            this.query = query;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SegmentUpdateByIdRequest segmentUpdateByIdRequest = buildBodyParams();
            return updateByIdCall(id, segmentUpdateByIdRequest, _callback);
        }

        private SegmentUpdateByIdRequest buildBodyParams() {
            SegmentUpdateByIdRequest segmentUpdateByIdRequest = new SegmentUpdateByIdRequest();
            segmentUpdateByIdRequest.name(this.name);
            segmentUpdateByIdRequest.query(this.query);
            return segmentUpdateByIdRequest;
        }

        /**
         * Execute updateById request
         * @return SegmentUpdateByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SegmentUpdateByIdResponse execute() throws ApiException {
            SegmentUpdateByIdRequest segmentUpdateByIdRequest = buildBodyParams();
            ApiResponse<SegmentUpdateByIdResponse> localVarResp = updateByIdWithHttpInfo(id, segmentUpdateByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;SegmentUpdateByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SegmentUpdateByIdResponse> executeWithHttpInfo() throws ApiException {
            SegmentUpdateByIdRequest segmentUpdateByIdRequest = buildBodyParams();
            return updateByIdWithHttpInfo(id, segmentUpdateByIdRequest);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SegmentUpdateByIdResponse> _callback) throws ApiException {
            SegmentUpdateByIdRequest segmentUpdateByIdRequest = buildBodyParams();
            return updateByIdAsync(id, segmentUpdateByIdRequest, _callback);
        }
    }

    /**
     * Update Segment
     * 
     * @param id  (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateByIdRequestBuilder(id);
    }
}
