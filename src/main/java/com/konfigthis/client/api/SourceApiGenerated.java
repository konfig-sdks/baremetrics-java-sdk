/*
 * Production
 * Baremetrics provides real-time subscription metrics for teams built with Stripe, Shopify Partners, Braintree, Recurly, Chargebee, Google Play, and App Store Connect.   In addition to metrics, Baremetrics provides tools that help you reduce churn and grow your business faster:   Recover: Prevent failed charges and keep your hard-earned revenue with our 100% automated toolkit.   Cancellation insights: Learn exactly why your customers cancel, calculate lost revenue by cancellation reason, and send automated emails to win customers back.  Flightpath: Plan for the future with flexible financial modeling tools built for growing SaaS companies.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.SourceCancelSubscriptionRequest;
import com.konfigthis.client.model.SourceCancelSubscriptionResponse;
import com.konfigthis.client.model.SourceCreateChargeOneOffRequest;
import com.konfigthis.client.model.SourceCreateCustomerRecordRequest;
import com.konfigthis.client.model.SourceCreateCustomerRecordResponse;
import com.konfigthis.client.model.SourceCreateOneOffRefundRequest;
import com.konfigthis.client.model.SourceCreatePlanRequest;
import com.konfigthis.client.model.SourceCreatePlanResponse;
import com.konfigthis.client.model.SourceCreateSubscriptionRequest;
import com.konfigthis.client.model.SourceCreateSubscriptionRequestAddonsInner;
import com.konfigthis.client.model.SourceCreateSubscriptionResponse;
import com.konfigthis.client.model.SourceGetCustomerDetailsResponse;
import com.konfigthis.client.model.SourceGetCustomerListResponse;
import com.konfigthis.client.model.SourceGetPlanResponse;
import com.konfigthis.client.model.SourceGetPlansListResponse;
import com.konfigthis.client.model.SourceGetRefundDetailsResponse;
import com.konfigthis.client.model.SourceGetRefundsResponse;
import com.konfigthis.client.model.SourceListCustomerEventsResponse;
import com.konfigthis.client.model.SourceListSourcesResponse;
import com.konfigthis.client.model.SourceUpdateCustomerInformationRequest;
import com.konfigthis.client.model.SourceUpdateCustomerInformationResponse;
import com.konfigthis.client.model.SourceUpdatePlanRequest;
import com.konfigthis.client.model.SourceUpdatePlanResponse;
import com.konfigthis.client.model.SourceUpdateSubscriptionRequest;
import com.konfigthis.client.model.SourceUpdateSubscriptionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SourceApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SourceApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SourceApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call cancelSubscriptionCall(String subscriptionOid, String sourceId, SourceCancelSubscriptionRequest sourceCancelSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sourceCancelSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/subscriptions/{subscription_oid}/cancel"
            .replace("{" + "subscription_oid" + "}", localVarApiClient.escapeString(subscriptionOid.toString()))
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelSubscriptionValidateBeforeCall(String subscriptionOid, String sourceId, SourceCancelSubscriptionRequest sourceCancelSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionOid' is set
        if (subscriptionOid == null) {
            throw new ApiException("Missing the required parameter 'subscriptionOid' when calling cancelSubscription(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling cancelSubscription(Async)");
        }

        return cancelSubscriptionCall(subscriptionOid, sourceId, sourceCancelSubscriptionRequest, _callback);

    }


    private ApiResponse<SourceCancelSubscriptionResponse> cancelSubscriptionWithHttpInfo(String subscriptionOid, String sourceId, SourceCancelSubscriptionRequest sourceCancelSubscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = cancelSubscriptionValidateBeforeCall(subscriptionOid, sourceId, sourceCancelSubscriptionRequest, null);
        Type localVarReturnType = new TypeToken<SourceCancelSubscriptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelSubscriptionAsync(String subscriptionOid, String sourceId, SourceCancelSubscriptionRequest sourceCancelSubscriptionRequest, final ApiCallback<SourceCancelSubscriptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelSubscriptionValidateBeforeCall(subscriptionOid, sourceId, sourceCancelSubscriptionRequest, _callback);
        Type localVarReturnType = new TypeToken<SourceCancelSubscriptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CancelSubscriptionRequestBuilder {
        private final OffsetDateTime canceledAt;
        private final String subscriptionOid;
        private final String sourceId;

        private CancelSubscriptionRequestBuilder(OffsetDateTime canceledAt, String subscriptionOid, String sourceId) {
            this.canceledAt = canceledAt;
            this.subscriptionOid = subscriptionOid;
            this.sourceId = sourceId;
        }

        /**
         * Build call for cancelSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SourceCancelSubscriptionRequest sourceCancelSubscriptionRequest = buildBodyParams();
            return cancelSubscriptionCall(subscriptionOid, sourceId, sourceCancelSubscriptionRequest, _callback);
        }

        private SourceCancelSubscriptionRequest buildBodyParams() {
            SourceCancelSubscriptionRequest sourceCancelSubscriptionRequest = new SourceCancelSubscriptionRequest();
            sourceCancelSubscriptionRequest.canceledAt(this.canceledAt);
            return sourceCancelSubscriptionRequest;
        }

        /**
         * Execute cancelSubscription request
         * @return SourceCancelSubscriptionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SourceCancelSubscriptionResponse execute() throws ApiException {
            SourceCancelSubscriptionRequest sourceCancelSubscriptionRequest = buildBodyParams();
            ApiResponse<SourceCancelSubscriptionResponse> localVarResp = cancelSubscriptionWithHttpInfo(subscriptionOid, sourceId, sourceCancelSubscriptionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cancelSubscription request with HTTP info returned
         * @return ApiResponse&lt;SourceCancelSubscriptionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SourceCancelSubscriptionResponse> executeWithHttpInfo() throws ApiException {
            SourceCancelSubscriptionRequest sourceCancelSubscriptionRequest = buildBodyParams();
            return cancelSubscriptionWithHttpInfo(subscriptionOid, sourceId, sourceCancelSubscriptionRequest);
        }

        /**
         * Execute cancelSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SourceCancelSubscriptionResponse> _callback) throws ApiException {
            SourceCancelSubscriptionRequest sourceCancelSubscriptionRequest = buildBodyParams();
            return cancelSubscriptionAsync(subscriptionOid, sourceId, sourceCancelSubscriptionRequest, _callback);
        }
    }

    /**
     * Cancel Subscription
     * This endpoint allows you to cancel a subscription.
     * @param subscriptionOid Your unique ID for the subscription (required)
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @return CancelSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CancelSubscriptionRequestBuilder cancelSubscription(OffsetDateTime canceledAt, String subscriptionOid, String sourceId) throws IllegalArgumentException {
        if (canceledAt == null) throw new IllegalArgumentException("\"canceledAt\" is required but got null");
        if (subscriptionOid == null) throw new IllegalArgumentException("\"subscriptionOid\" is required but got null");
            

        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        return new CancelSubscriptionRequestBuilder(canceledAt, subscriptionOid, sourceId);
    }
    private okhttp3.Call createChargeOneOffCall(String sourceId, SourceCreateChargeOneOffRequest sourceCreateChargeOneOffRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sourceCreateChargeOneOffRequest;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/charges"
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChargeOneOffValidateBeforeCall(String sourceId, SourceCreateChargeOneOffRequest sourceCreateChargeOneOffRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling createChargeOneOff(Async)");
        }

        return createChargeOneOffCall(sourceId, sourceCreateChargeOneOffRequest, _callback);

    }


    private ApiResponse<String> createChargeOneOffWithHttpInfo(String sourceId, SourceCreateChargeOneOffRequest sourceCreateChargeOneOffRequest) throws ApiException {
        okhttp3.Call localVarCall = createChargeOneOffValidateBeforeCall(sourceId, sourceCreateChargeOneOffRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createChargeOneOffAsync(String sourceId, SourceCreateChargeOneOffRequest sourceCreateChargeOneOffRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChargeOneOffValidateBeforeCall(sourceId, sourceCreateChargeOneOffRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateChargeOneOffRequestBuilder {
        private final String oid;
        private final Integer amount;
        private final String currency;
        private final String customerOid;
        private final String sourceId;
        private OffsetDateTime created;
        private String status;
        private Integer fee;
        private String subscriptionOid;

        private CreateChargeOneOffRequestBuilder(String oid, Integer amount, String currency, String customerOid, String sourceId) {
            this.oid = oid;
            this.amount = amount;
            this.currency = currency;
            this.customerOid = customerOid;
            this.sourceId = sourceId;
        }

        /**
         * Set created
         * @param created Unix timestamp of when this was created (optional)
         * @return CreateChargeOneOffRequestBuilder
         */
        public CreateChargeOneOffRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set status
         * @param status The status of this charge. Can be paid or failed. Defaults to paid. (optional, default to paid)
         * @return CreateChargeOneOffRequestBuilder
         */
        public CreateChargeOneOffRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set fee
         * @param fee  (optional, default to 0)
         * @return CreateChargeOneOffRequestBuilder
         */
        public CreateChargeOneOffRequestBuilder fee(Integer fee) {
            this.fee = fee;
            return this;
        }
        
        /**
         * Set subscriptionOid
         * @param subscriptionOid This can only be supplied when Subscription Auto Charging is disabled. Please contact support if you want to handle your subscription charges manually. (optional)
         * @return CreateChargeOneOffRequestBuilder
         */
        public CreateChargeOneOffRequestBuilder subscriptionOid(String subscriptionOid) {
            this.subscriptionOid = subscriptionOid;
            return this;
        }
        
        /**
         * Build call for createChargeOneOff
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SourceCreateChargeOneOffRequest sourceCreateChargeOneOffRequest = buildBodyParams();
            return createChargeOneOffCall(sourceId, sourceCreateChargeOneOffRequest, _callback);
        }

        private SourceCreateChargeOneOffRequest buildBodyParams() {
            SourceCreateChargeOneOffRequest sourceCreateChargeOneOffRequest = new SourceCreateChargeOneOffRequest();
            sourceCreateChargeOneOffRequest.oid(this.oid);
            sourceCreateChargeOneOffRequest.amount(this.amount);
            sourceCreateChargeOneOffRequest.currency(this.currency);
            sourceCreateChargeOneOffRequest.customerOid(this.customerOid);
            sourceCreateChargeOneOffRequest.created(this.created);
            sourceCreateChargeOneOffRequest.status(this.status);
            sourceCreateChargeOneOffRequest.fee(this.fee);
            sourceCreateChargeOneOffRequest.subscriptionOid(this.subscriptionOid);
            return sourceCreateChargeOneOffRequest;
        }

        /**
         * Execute createChargeOneOff request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            SourceCreateChargeOneOffRequest sourceCreateChargeOneOffRequest = buildBodyParams();
            ApiResponse<String> localVarResp = createChargeOneOffWithHttpInfo(sourceId, sourceCreateChargeOneOffRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createChargeOneOff request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            SourceCreateChargeOneOffRequest sourceCreateChargeOneOffRequest = buildBodyParams();
            return createChargeOneOffWithHttpInfo(sourceId, sourceCreateChargeOneOffRequest);
        }

        /**
         * Execute createChargeOneOff request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            SourceCreateChargeOneOffRequest sourceCreateChargeOneOffRequest = buildBodyParams();
            return createChargeOneOffAsync(sourceId, sourceCreateChargeOneOffRequest, _callback);
        }
    }

    /**
     * Create Charge
     * Create \&quot;One-Off\&quot; charges that are not linked to a subscription.
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @return CreateChargeOneOffRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateChargeOneOffRequestBuilder createChargeOneOff(String oid, Integer amount, String currency, String customerOid, String sourceId) throws IllegalArgumentException {
        if (oid == null) throw new IllegalArgumentException("\"oid\" is required but got null");
            

        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            

        if (customerOid == null) throw new IllegalArgumentException("\"customerOid\" is required but got null");
            

        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        return new CreateChargeOneOffRequestBuilder(oid, amount, currency, customerOid, sourceId);
    }
    private okhttp3.Call createCustomerRecordCall(String sourceId, SourceCreateCustomerRecordRequest sourceCreateCustomerRecordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sourceCreateCustomerRecordRequest;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/customers"
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomerRecordValidateBeforeCall(String sourceId, SourceCreateCustomerRecordRequest sourceCreateCustomerRecordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling createCustomerRecord(Async)");
        }

        return createCustomerRecordCall(sourceId, sourceCreateCustomerRecordRequest, _callback);

    }


    private ApiResponse<SourceCreateCustomerRecordResponse> createCustomerRecordWithHttpInfo(String sourceId, SourceCreateCustomerRecordRequest sourceCreateCustomerRecordRequest) throws ApiException {
        okhttp3.Call localVarCall = createCustomerRecordValidateBeforeCall(sourceId, sourceCreateCustomerRecordRequest, null);
        Type localVarReturnType = new TypeToken<SourceCreateCustomerRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCustomerRecordAsync(String sourceId, SourceCreateCustomerRecordRequest sourceCreateCustomerRecordRequest, final ApiCallback<SourceCreateCustomerRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomerRecordValidateBeforeCall(sourceId, sourceCreateCustomerRecordRequest, _callback);
        Type localVarReturnType = new TypeToken<SourceCreateCustomerRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCustomerRecordRequestBuilder {
        private final String oid;
        private final String sourceId;
        private String name;
        private String notes;
        private String email;
        private OffsetDateTime created;

        private CreateCustomerRecordRequestBuilder(String oid, String sourceId) {
            this.oid = oid;
            this.sourceId = sourceId;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return CreateCustomerRecordRequestBuilder
         */
        public CreateCustomerRecordRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set notes
         * @param notes Your own notes for this customer. These will be displayed in the profile (optional)
         * @return CreateCustomerRecordRequestBuilder
         */
        public CreateCustomerRecordRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Set email
         * @param email An email address for this customer. This is used to lookup extra profile information (optional)
         * @return CreateCustomerRecordRequestBuilder
         */
        public CreateCustomerRecordRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set created
         * @param created A unix timestamp of when this customer was created. Defaults to now. (optional)
         * @return CreateCustomerRecordRequestBuilder
         */
        public CreateCustomerRecordRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Build call for createCustomerRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SourceCreateCustomerRecordRequest sourceCreateCustomerRecordRequest = buildBodyParams();
            return createCustomerRecordCall(sourceId, sourceCreateCustomerRecordRequest, _callback);
        }

        private SourceCreateCustomerRecordRequest buildBodyParams() {
            SourceCreateCustomerRecordRequest sourceCreateCustomerRecordRequest = new SourceCreateCustomerRecordRequest();
            sourceCreateCustomerRecordRequest.name(this.name);
            sourceCreateCustomerRecordRequest.notes(this.notes);
            sourceCreateCustomerRecordRequest.email(this.email);
            sourceCreateCustomerRecordRequest.oid(this.oid);
            sourceCreateCustomerRecordRequest.created(this.created);
            return sourceCreateCustomerRecordRequest;
        }

        /**
         * Execute createCustomerRecord request
         * @return SourceCreateCustomerRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SourceCreateCustomerRecordResponse execute() throws ApiException {
            SourceCreateCustomerRecordRequest sourceCreateCustomerRecordRequest = buildBodyParams();
            ApiResponse<SourceCreateCustomerRecordResponse> localVarResp = createCustomerRecordWithHttpInfo(sourceId, sourceCreateCustomerRecordRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCustomerRecord request with HTTP info returned
         * @return ApiResponse&lt;SourceCreateCustomerRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SourceCreateCustomerRecordResponse> executeWithHttpInfo() throws ApiException {
            SourceCreateCustomerRecordRequest sourceCreateCustomerRecordRequest = buildBodyParams();
            return createCustomerRecordWithHttpInfo(sourceId, sourceCreateCustomerRecordRequest);
        }

        /**
         * Execute createCustomerRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SourceCreateCustomerRecordResponse> _callback) throws ApiException {
            SourceCreateCustomerRecordRequest sourceCreateCustomerRecordRequest = buildBodyParams();
            return createCustomerRecordAsync(sourceId, sourceCreateCustomerRecordRequest, _callback);
        }
    }

    /**
     * Create Customer
     * This endpoint allows you to create a customer record. After you create the record, you will be able to create a [Subscription](https://developers.baremetrics.com/reference/introduction)
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @return CreateCustomerRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateCustomerRecordRequestBuilder createCustomerRecord(String oid, String sourceId) throws IllegalArgumentException {
        if (oid == null) throw new IllegalArgumentException("\"oid\" is required but got null");
            

        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        return new CreateCustomerRecordRequestBuilder(oid, sourceId);
    }
    private okhttp3.Call createOneOffRefundCall(String sourceId, SourceCreateOneOffRefundRequest sourceCreateOneOffRefundRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sourceCreateOneOffRefundRequest;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/refunds"
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOneOffRefundValidateBeforeCall(String sourceId, SourceCreateOneOffRefundRequest sourceCreateOneOffRefundRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling createOneOffRefund(Async)");
        }

        return createOneOffRefundCall(sourceId, sourceCreateOneOffRefundRequest, _callback);

    }


    private ApiResponse<String> createOneOffRefundWithHttpInfo(String sourceId, SourceCreateOneOffRefundRequest sourceCreateOneOffRefundRequest) throws ApiException {
        okhttp3.Call localVarCall = createOneOffRefundValidateBeforeCall(sourceId, sourceCreateOneOffRefundRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOneOffRefundAsync(String sourceId, SourceCreateOneOffRefundRequest sourceCreateOneOffRefundRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOneOffRefundValidateBeforeCall(sourceId, sourceCreateOneOffRefundRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOneOffRefundRequestBuilder {
        private final String oid;
        private final Integer amount;
        private final String currency;
        private final String customerOid;
        private final String chargeOid;
        private final String sourceId;
        private OffsetDateTime created;

        private CreateOneOffRefundRequestBuilder(String oid, Integer amount, String currency, String customerOid, String chargeOid, String sourceId) {
            this.oid = oid;
            this.amount = amount;
            this.currency = currency;
            this.customerOid = customerOid;
            this.chargeOid = chargeOid;
            this.sourceId = sourceId;
        }

        /**
         * Set created
         * @param created Unix timestamp of when this was created (optional)
         * @return CreateOneOffRefundRequestBuilder
         */
        public CreateOneOffRefundRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Build call for createOneOffRefund
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SourceCreateOneOffRefundRequest sourceCreateOneOffRefundRequest = buildBodyParams();
            return createOneOffRefundCall(sourceId, sourceCreateOneOffRefundRequest, _callback);
        }

        private SourceCreateOneOffRefundRequest buildBodyParams() {
            SourceCreateOneOffRefundRequest sourceCreateOneOffRefundRequest = new SourceCreateOneOffRefundRequest();
            sourceCreateOneOffRefundRequest.oid(this.oid);
            sourceCreateOneOffRefundRequest.amount(this.amount);
            sourceCreateOneOffRefundRequest.currency(this.currency);
            sourceCreateOneOffRefundRequest.customerOid(this.customerOid);
            sourceCreateOneOffRefundRequest.chargeOid(this.chargeOid);
            sourceCreateOneOffRefundRequest.created(this.created);
            return sourceCreateOneOffRefundRequest;
        }

        /**
         * Execute createOneOffRefund request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            SourceCreateOneOffRefundRequest sourceCreateOneOffRefundRequest = buildBodyParams();
            ApiResponse<String> localVarResp = createOneOffRefundWithHttpInfo(sourceId, sourceCreateOneOffRefundRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOneOffRefund request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            SourceCreateOneOffRefundRequest sourceCreateOneOffRefundRequest = buildBodyParams();
            return createOneOffRefundWithHttpInfo(sourceId, sourceCreateOneOffRefundRequest);
        }

        /**
         * Execute createOneOffRefund request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            SourceCreateOneOffRefundRequest sourceCreateOneOffRefundRequest = buildBodyParams();
            return createOneOffRefundAsync(sourceId, sourceCreateOneOffRefundRequest, _callback);
        }
    }

    /**
     * Create Refund
     * Create \&quot;One-Off\&quot; refunds that are not linked to a subscription.
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @return CreateOneOffRefundRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateOneOffRefundRequestBuilder createOneOffRefund(String oid, Integer amount, String currency, String customerOid, String chargeOid, String sourceId) throws IllegalArgumentException {
        if (oid == null) throw new IllegalArgumentException("\"oid\" is required but got null");
            

        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            

        if (customerOid == null) throw new IllegalArgumentException("\"customerOid\" is required but got null");
            

        if (chargeOid == null) throw new IllegalArgumentException("\"chargeOid\" is required but got null");
            

        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        return new CreateOneOffRefundRequestBuilder(oid, amount, currency, customerOid, chargeOid, sourceId);
    }
    private okhttp3.Call createPlanCall(String sourceId, SourceCreatePlanRequest sourceCreatePlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sourceCreatePlanRequest;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/plans"
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPlanValidateBeforeCall(String sourceId, SourceCreatePlanRequest sourceCreatePlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling createPlan(Async)");
        }

        return createPlanCall(sourceId, sourceCreatePlanRequest, _callback);

    }


    private ApiResponse<SourceCreatePlanResponse> createPlanWithHttpInfo(String sourceId, SourceCreatePlanRequest sourceCreatePlanRequest) throws ApiException {
        okhttp3.Call localVarCall = createPlanValidateBeforeCall(sourceId, sourceCreatePlanRequest, null);
        Type localVarReturnType = new TypeToken<SourceCreatePlanResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPlanAsync(String sourceId, SourceCreatePlanRequest sourceCreatePlanRequest, final ApiCallback<SourceCreatePlanResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPlanValidateBeforeCall(sourceId, sourceCreatePlanRequest, _callback);
        Type localVarReturnType = new TypeToken<SourceCreatePlanResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePlanRequestBuilder {
        private final String oid;
        private final String name;
        private final String currency;
        private final Integer amount;
        private final String interval;
        private final Integer intervalCount;
        private final String sourceId;
        private Integer trialDuration;
        private String trialDurationUnit;

        private CreatePlanRequestBuilder(String oid, String name, String currency, Integer amount, String interval, Integer intervalCount, String sourceId) {
            this.oid = oid;
            this.name = name;
            this.currency = currency;
            this.amount = amount;
            this.interval = interval;
            this.intervalCount = intervalCount;
            this.sourceId = sourceId;
        }

        /**
         * Set trialDuration
         * @param trialDuration The duration of this trial. This is to be used in conjunction with trial_duration_unit (optional, default to 0)
         * @return CreatePlanRequestBuilder
         */
        public CreatePlanRequestBuilder trialDuration(Integer trialDuration) {
            this.trialDuration = trialDuration;
            return this;
        }
        
        /**
         * Set trialDurationUnit
         * @param trialDurationUnit This is to be used in conjunction with trial_duration (optional, default to day)
         * @return CreatePlanRequestBuilder
         */
        public CreatePlanRequestBuilder trialDurationUnit(String trialDurationUnit) {
            this.trialDurationUnit = trialDurationUnit;
            return this;
        }
        
        /**
         * Build call for createPlan
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SourceCreatePlanRequest sourceCreatePlanRequest = buildBodyParams();
            return createPlanCall(sourceId, sourceCreatePlanRequest, _callback);
        }

        private SourceCreatePlanRequest buildBodyParams() {
            SourceCreatePlanRequest sourceCreatePlanRequest = new SourceCreatePlanRequest();
            sourceCreatePlanRequest.oid(this.oid);
            sourceCreatePlanRequest.name(this.name);
            sourceCreatePlanRequest.currency(this.currency);
            sourceCreatePlanRequest.amount(this.amount);
            sourceCreatePlanRequest.interval(this.interval);
            sourceCreatePlanRequest.intervalCount(this.intervalCount);
            sourceCreatePlanRequest.trialDuration(this.trialDuration);
            sourceCreatePlanRequest.trialDurationUnit(this.trialDurationUnit);
            return sourceCreatePlanRequest;
        }

        /**
         * Execute createPlan request
         * @return SourceCreatePlanResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SourceCreatePlanResponse execute() throws ApiException {
            SourceCreatePlanRequest sourceCreatePlanRequest = buildBodyParams();
            ApiResponse<SourceCreatePlanResponse> localVarResp = createPlanWithHttpInfo(sourceId, sourceCreatePlanRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPlan request with HTTP info returned
         * @return ApiResponse&lt;SourceCreatePlanResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SourceCreatePlanResponse> executeWithHttpInfo() throws ApiException {
            SourceCreatePlanRequest sourceCreatePlanRequest = buildBodyParams();
            return createPlanWithHttpInfo(sourceId, sourceCreatePlanRequest);
        }

        /**
         * Execute createPlan request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SourceCreatePlanResponse> _callback) throws ApiException {
            SourceCreatePlanRequest sourceCreatePlanRequest = buildBodyParams();
            return createPlanAsync(sourceId, sourceCreatePlanRequest, _callback);
        }
    }

    /**
     * Create Plan
     * Create a plan for use when [creating](https://developers.baremetrics.com/reference/introduction) or [updating](https://developers.baremetrics.com/reference/introduction) subscriptions.
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @return CreatePlanRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreatePlanRequestBuilder createPlan(String oid, String name, String currency, Integer amount, String interval, Integer intervalCount, String sourceId) throws IllegalArgumentException {
        if (oid == null) throw new IllegalArgumentException("\"oid\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            

        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (interval == null) throw new IllegalArgumentException("\"interval\" is required but got null");
            

        if (intervalCount == null) throw new IllegalArgumentException("\"intervalCount\" is required but got null");
        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        return new CreatePlanRequestBuilder(oid, name, currency, amount, interval, intervalCount, sourceId);
    }
    private okhttp3.Call createSubscriptionCall(String sourceId, SourceCreateSubscriptionRequest sourceCreateSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sourceCreateSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/subscriptions"
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSubscriptionValidateBeforeCall(String sourceId, SourceCreateSubscriptionRequest sourceCreateSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling createSubscription(Async)");
        }

        return createSubscriptionCall(sourceId, sourceCreateSubscriptionRequest, _callback);

    }


    private ApiResponse<SourceCreateSubscriptionResponse> createSubscriptionWithHttpInfo(String sourceId, SourceCreateSubscriptionRequest sourceCreateSubscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = createSubscriptionValidateBeforeCall(sourceId, sourceCreateSubscriptionRequest, null);
        Type localVarReturnType = new TypeToken<SourceCreateSubscriptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSubscriptionAsync(String sourceId, SourceCreateSubscriptionRequest sourceCreateSubscriptionRequest, final ApiCallback<SourceCreateSubscriptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSubscriptionValidateBeforeCall(sourceId, sourceCreateSubscriptionRequest, _callback);
        Type localVarReturnType = new TypeToken<SourceCreateSubscriptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSubscriptionRequestBuilder {
        private final String oid;
        private final OffsetDateTime startedAt;
        private final String planOid;
        private final String customerOid;
        private final String sourceId;
        private OffsetDateTime canceledAt;
        private List<SourceCreateSubscriptionRequestAddonsInner> addons;
        private Integer quantity;
        private Integer discount;

        private CreateSubscriptionRequestBuilder(String oid, OffsetDateTime startedAt, String planOid, String customerOid, String sourceId) {
            this.oid = oid;
            this.startedAt = startedAt;
            this.planOid = planOid;
            this.customerOid = customerOid;
            this.sourceId = sourceId;
        }

        /**
         * Set canceledAt
         * @param canceledAt A unix timestamp of when this subscription was, or should be canceled. This cannot be changed, so only set this if you are certain you know when the subscription will end. (optional)
         * @return CreateSubscriptionRequestBuilder
         */
        public CreateSubscriptionRequestBuilder canceledAt(OffsetDateTime canceledAt) {
            this.canceledAt = canceledAt;
            return this;
        }
        
        /**
         * Set addons
         * @param addons  (optional)
         * @return CreateSubscriptionRequestBuilder
         */
        public CreateSubscriptionRequestBuilder addons(List<SourceCreateSubscriptionRequestAddonsInner> addons) {
            this.addons = addons;
            return this;
        }
        
        /**
         * Set quantity
         * @param quantity  (optional, default to 1)
         * @return CreateSubscriptionRequestBuilder
         */
        public CreateSubscriptionRequestBuilder quantity(Integer quantity) {
            this.quantity = quantity;
            return this;
        }
        
        /**
         * Set discount
         * @param discount Integer value (in the same currency as the plan) (optional)
         * @return CreateSubscriptionRequestBuilder
         */
        public CreateSubscriptionRequestBuilder discount(Integer discount) {
            this.discount = discount;
            return this;
        }
        
        /**
         * Build call for createSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SourceCreateSubscriptionRequest sourceCreateSubscriptionRequest = buildBodyParams();
            return createSubscriptionCall(sourceId, sourceCreateSubscriptionRequest, _callback);
        }

        private SourceCreateSubscriptionRequest buildBodyParams() {
            SourceCreateSubscriptionRequest sourceCreateSubscriptionRequest = new SourceCreateSubscriptionRequest();
            sourceCreateSubscriptionRequest.oid(this.oid);
            sourceCreateSubscriptionRequest.startedAt(this.startedAt);
            sourceCreateSubscriptionRequest.canceledAt(this.canceledAt);
            sourceCreateSubscriptionRequest.planOid(this.planOid);
            sourceCreateSubscriptionRequest.customerOid(this.customerOid);
            sourceCreateSubscriptionRequest.addons(this.addons);
            sourceCreateSubscriptionRequest.quantity(this.quantity);
            sourceCreateSubscriptionRequest.discount(this.discount);
            return sourceCreateSubscriptionRequest;
        }

        /**
         * Execute createSubscription request
         * @return SourceCreateSubscriptionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SourceCreateSubscriptionResponse execute() throws ApiException {
            SourceCreateSubscriptionRequest sourceCreateSubscriptionRequest = buildBodyParams();
            ApiResponse<SourceCreateSubscriptionResponse> localVarResp = createSubscriptionWithHttpInfo(sourceId, sourceCreateSubscriptionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSubscription request with HTTP info returned
         * @return ApiResponse&lt;SourceCreateSubscriptionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SourceCreateSubscriptionResponse> executeWithHttpInfo() throws ApiException {
            SourceCreateSubscriptionRequest sourceCreateSubscriptionRequest = buildBodyParams();
            return createSubscriptionWithHttpInfo(sourceId, sourceCreateSubscriptionRequest);
        }

        /**
         * Execute createSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SourceCreateSubscriptionResponse> _callback) throws ApiException {
            SourceCreateSubscriptionRequest sourceCreateSubscriptionRequest = buildBodyParams();
            return createSubscriptionAsync(sourceId, sourceCreateSubscriptionRequest, _callback);
        }
    }

    /**
     * Create Subscription
     * This endpoint allows you to create a Subscription.
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @return CreateSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateSubscriptionRequestBuilder createSubscription(String oid, OffsetDateTime startedAt, String planOid, String customerOid, String sourceId) throws IllegalArgumentException {
        if (oid == null) throw new IllegalArgumentException("\"oid\" is required but got null");
            

        if (startedAt == null) throw new IllegalArgumentException("\"startedAt\" is required but got null");
        if (planOid == null) throw new IllegalArgumentException("\"planOid\" is required but got null");
            

        if (customerOid == null) throw new IllegalArgumentException("\"customerOid\" is required but got null");
            

        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        return new CreateSubscriptionRequestBuilder(oid, startedAt, planOid, customerOid, sourceId);
    }
    private okhttp3.Call deleteCustomerCall(String oid, String sourceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/customers/{oid}"
            .replace("{" + "oid" + "}", localVarApiClient.escapeString(oid.toString()))
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomerValidateBeforeCall(String oid, String sourceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'oid' is set
        if (oid == null) {
            throw new ApiException("Missing the required parameter 'oid' when calling deleteCustomer(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling deleteCustomer(Async)");
        }

        return deleteCustomerCall(oid, sourceId, _callback);

    }


    private ApiResponse<Object> deleteCustomerWithHttpInfo(String oid, String sourceId) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomerValidateBeforeCall(oid, sourceId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteCustomerAsync(String oid, String sourceId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomerValidateBeforeCall(oid, sourceId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteCustomerRequestBuilder {
        private final String oid;
        private final String sourceId;

        private DeleteCustomerRequestBuilder(String oid, String sourceId) {
            this.oid = oid;
            this.sourceId = sourceId;
        }

        /**
         * Build call for deleteCustomer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCustomerCall(oid, sourceId, _callback);
        }


        /**
         * Execute deleteCustomer request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteCustomerWithHttpInfo(oid, sourceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteCustomer request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteCustomerWithHttpInfo(oid, sourceId);
        }

        /**
         * Execute deleteCustomer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteCustomerAsync(oid, sourceId, _callback);
        }
    }

    /**
     * Delete Customer
     * 
     * @param oid  (required)
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @return DeleteCustomerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCustomerRequestBuilder deleteCustomer(String oid, String sourceId) throws IllegalArgumentException {
        if (oid == null) throw new IllegalArgumentException("\"oid\" is required but got null");
            

        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        return new DeleteCustomerRequestBuilder(oid, sourceId);
    }
    private okhttp3.Call deletePlanCall(String oid, String sourceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/plans/{oid}"
            .replace("{" + "oid" + "}", localVarApiClient.escapeString(oid.toString()))
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePlanValidateBeforeCall(String oid, String sourceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'oid' is set
        if (oid == null) {
            throw new ApiException("Missing the required parameter 'oid' when calling deletePlan(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling deletePlan(Async)");
        }

        return deletePlanCall(oid, sourceId, _callback);

    }


    private ApiResponse<Object> deletePlanWithHttpInfo(String oid, String sourceId) throws ApiException {
        okhttp3.Call localVarCall = deletePlanValidateBeforeCall(oid, sourceId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deletePlanAsync(String oid, String sourceId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePlanValidateBeforeCall(oid, sourceId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeletePlanRequestBuilder {
        private final String oid;
        private final String sourceId;

        private DeletePlanRequestBuilder(String oid, String sourceId) {
            this.oid = oid;
            this.sourceId = sourceId;
        }

        /**
         * Build call for deletePlan
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePlanCall(oid, sourceId, _callback);
        }


        /**
         * Execute deletePlan request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deletePlanWithHttpInfo(oid, sourceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deletePlan request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deletePlanWithHttpInfo(oid, sourceId);
        }

        /**
         * Execute deletePlan request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deletePlanAsync(oid, sourceId, _callback);
        }
    }

    /**
     * Delete Plan
     * 
     * @param oid  (required)
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @return DeletePlanRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
     </table>
     */
    public DeletePlanRequestBuilder deletePlan(String oid, String sourceId) throws IllegalArgumentException {
        if (oid == null) throw new IllegalArgumentException("\"oid\" is required but got null");
            

        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        return new DeletePlanRequestBuilder(oid, sourceId);
    }
    private okhttp3.Call getChargeDetailsCall(String sourceId, String oid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/charges/{oid}"
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()))
            .replace("{" + "oid" + "}", localVarApiClient.escapeString(oid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChargeDetailsValidateBeforeCall(String sourceId, String oid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling getChargeDetails(Async)");
        }

        // verify the required parameter 'oid' is set
        if (oid == null) {
            throw new ApiException("Missing the required parameter 'oid' when calling getChargeDetails(Async)");
        }

        return getChargeDetailsCall(sourceId, oid, _callback);

    }


    private ApiResponse<String> getChargeDetailsWithHttpInfo(String sourceId, String oid) throws ApiException {
        okhttp3.Call localVarCall = getChargeDetailsValidateBeforeCall(sourceId, oid, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChargeDetailsAsync(String sourceId, String oid, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChargeDetailsValidateBeforeCall(sourceId, oid, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChargeDetailsRequestBuilder {
        private final String sourceId;
        private final String oid;

        private GetChargeDetailsRequestBuilder(String sourceId, String oid) {
            this.sourceId = sourceId;
            this.oid = oid;
        }

        /**
         * Build call for getChargeDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChargeDetailsCall(sourceId, oid, _callback);
        }


        /**
         * Execute getChargeDetails request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getChargeDetailsWithHttpInfo(sourceId, oid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChargeDetails request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getChargeDetailsWithHttpInfo(sourceId, oid);
        }

        /**
         * Execute getChargeDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getChargeDetailsAsync(sourceId, oid, _callback);
        }
    }

    /**
     * Show Charge
     * 
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @param oid  (required)
     * @return GetChargeDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetChargeDetailsRequestBuilder getChargeDetails(String sourceId, String oid) throws IllegalArgumentException {
        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        if (oid == null) throw new IllegalArgumentException("\"oid\" is required but got null");
            

        return new GetChargeDetailsRequestBuilder(sourceId, oid);
    }
    private okhttp3.Call getChargeListCall(String sourceId, OffsetDateTime start, OffsetDateTime end, String subscriptionOid, String customerOid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/charges"
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (subscriptionOid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subscription_oid", subscriptionOid));
        }

        if (customerOid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer_oid", customerOid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChargeListValidateBeforeCall(String sourceId, OffsetDateTime start, OffsetDateTime end, String subscriptionOid, String customerOid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling getChargeList(Async)");
        }

        return getChargeListCall(sourceId, start, end, subscriptionOid, customerOid, _callback);

    }


    private ApiResponse<String> getChargeListWithHttpInfo(String sourceId, OffsetDateTime start, OffsetDateTime end, String subscriptionOid, String customerOid) throws ApiException {
        okhttp3.Call localVarCall = getChargeListValidateBeforeCall(sourceId, start, end, subscriptionOid, customerOid, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChargeListAsync(String sourceId, OffsetDateTime start, OffsetDateTime end, String subscriptionOid, String customerOid, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChargeListValidateBeforeCall(sourceId, start, end, subscriptionOid, customerOid, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChargeListRequestBuilder {
        private final String sourceId;
        private OffsetDateTime start;
        private OffsetDateTime end;
        private String subscriptionOid;
        private String customerOid;

        private GetChargeListRequestBuilder(String sourceId) {
            this.sourceId = sourceId;
        }

        /**
         * Set start
         * @param start  (optional)
         * @return GetChargeListRequestBuilder
         */
        public GetChargeListRequestBuilder start(OffsetDateTime start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set end
         * @param end  (optional)
         * @return GetChargeListRequestBuilder
         */
        public GetChargeListRequestBuilder end(OffsetDateTime end) {
            this.end = end;
            return this;
        }
        
        /**
         * Set subscriptionOid
         * @param subscriptionOid  (optional)
         * @return GetChargeListRequestBuilder
         */
        public GetChargeListRequestBuilder subscriptionOid(String subscriptionOid) {
            this.subscriptionOid = subscriptionOid;
            return this;
        }
        
        /**
         * Set customerOid
         * @param customerOid  (optional)
         * @return GetChargeListRequestBuilder
         */
        public GetChargeListRequestBuilder customerOid(String customerOid) {
            this.customerOid = customerOid;
            return this;
        }
        
        /**
         * Build call for getChargeList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChargeListCall(sourceId, start, end, subscriptionOid, customerOid, _callback);
        }


        /**
         * Execute getChargeList request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getChargeListWithHttpInfo(sourceId, start, end, subscriptionOid, customerOid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChargeList request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getChargeListWithHttpInfo(sourceId, start, end, subscriptionOid, customerOid);
        }

        /**
         * Execute getChargeList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getChargeListAsync(sourceId, start, end, subscriptionOid, customerOid, _callback);
        }
    }

    /**
     * List Charges
     * 
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @return GetChargeListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetChargeListRequestBuilder getChargeList(String sourceId) throws IllegalArgumentException {
        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        return new GetChargeListRequestBuilder(sourceId);
    }
    private okhttp3.Call getCustomerDetailsCall(String oid, String sourceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/customers/{oid}"
            .replace("{" + "oid" + "}", localVarApiClient.escapeString(oid.toString()))
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerDetailsValidateBeforeCall(String oid, String sourceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'oid' is set
        if (oid == null) {
            throw new ApiException("Missing the required parameter 'oid' when calling getCustomerDetails(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling getCustomerDetails(Async)");
        }

        return getCustomerDetailsCall(oid, sourceId, _callback);

    }


    private ApiResponse<SourceGetCustomerDetailsResponse> getCustomerDetailsWithHttpInfo(String oid, String sourceId) throws ApiException {
        okhttp3.Call localVarCall = getCustomerDetailsValidateBeforeCall(oid, sourceId, null);
        Type localVarReturnType = new TypeToken<SourceGetCustomerDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomerDetailsAsync(String oid, String sourceId, final ApiCallback<SourceGetCustomerDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerDetailsValidateBeforeCall(oid, sourceId, _callback);
        Type localVarReturnType = new TypeToken<SourceGetCustomerDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomerDetailsRequestBuilder {
        private final String oid;
        private final String sourceId;

        private GetCustomerDetailsRequestBuilder(String oid, String sourceId) {
            this.oid = oid;
            this.sourceId = sourceId;
        }

        /**
         * Build call for getCustomerDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomerDetailsCall(oid, sourceId, _callback);
        }


        /**
         * Execute getCustomerDetails request
         * @return SourceGetCustomerDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SourceGetCustomerDetailsResponse execute() throws ApiException {
            ApiResponse<SourceGetCustomerDetailsResponse> localVarResp = getCustomerDetailsWithHttpInfo(oid, sourceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomerDetails request with HTTP info returned
         * @return ApiResponse&lt;SourceGetCustomerDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SourceGetCustomerDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getCustomerDetailsWithHttpInfo(oid, sourceId);
        }

        /**
         * Execute getCustomerDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SourceGetCustomerDetailsResponse> _callback) throws ApiException {
            return getCustomerDetailsAsync(oid, sourceId, _callback);
        }
    }

    /**
     * Show Customer
     * 
     * @param oid  (required)
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @return GetCustomerDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomerDetailsRequestBuilder getCustomerDetails(String oid, String sourceId) throws IllegalArgumentException {
        if (oid == null) throw new IllegalArgumentException("\"oid\" is required but got null");
            

        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        return new GetCustomerDetailsRequestBuilder(oid, sourceId);
    }
    private okhttp3.Call getCustomerListCall(String sourceId, String search, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/customers"
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerListValidateBeforeCall(String sourceId, String search, String sort, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling getCustomerList(Async)");
        }

        return getCustomerListCall(sourceId, search, sort, order, _callback);

    }


    private ApiResponse<SourceGetCustomerListResponse> getCustomerListWithHttpInfo(String sourceId, String search, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getCustomerListValidateBeforeCall(sourceId, search, sort, order, null);
        Type localVarReturnType = new TypeToken<SourceGetCustomerListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomerListAsync(String sourceId, String search, String sort, String order, final ApiCallback<SourceGetCustomerListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerListValidateBeforeCall(sourceId, search, sort, order, _callback);
        Type localVarReturnType = new TypeToken<SourceGetCustomerListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomerListRequestBuilder {
        private final String sourceId;
        private String search;
        private String sort;
        private String order;

        private GetCustomerListRequestBuilder(String sourceId) {
            this.sourceId = sourceId;
        }

        /**
         * Set search
         * @param search Allows you to search for a customer based on: oid, email, notes and name (optional)
         * @return GetCustomerListRequestBuilder
         */
        public GetCustomerListRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Allows you to sort the results. You can use ltv or created (optional, default to created)
         * @return GetCustomerListRequestBuilder
         */
        public GetCustomerListRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order  (optional, default to asc)
         * @return GetCustomerListRequestBuilder
         */
        public GetCustomerListRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getCustomerList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomerListCall(sourceId, search, sort, order, _callback);
        }


        /**
         * Execute getCustomerList request
         * @return SourceGetCustomerListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SourceGetCustomerListResponse execute() throws ApiException {
            ApiResponse<SourceGetCustomerListResponse> localVarResp = getCustomerListWithHttpInfo(sourceId, search, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomerList request with HTTP info returned
         * @return ApiResponse&lt;SourceGetCustomerListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SourceGetCustomerListResponse> executeWithHttpInfo() throws ApiException {
            return getCustomerListWithHttpInfo(sourceId, search, sort, order);
        }

        /**
         * Execute getCustomerList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SourceGetCustomerListResponse> _callback) throws ApiException {
            return getCustomerListAsync(sourceId, search, sort, order, _callback);
        }
    }

    /**
     * List Customers
     * Fetch a list of all customers on your account
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @return GetCustomerListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomerListRequestBuilder getCustomerList(String sourceId) throws IllegalArgumentException {
        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        return new GetCustomerListRequestBuilder(sourceId);
    }
    private okhttp3.Call getEventByIdCall(String sourceId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/events/{id}"
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventByIdValidateBeforeCall(String sourceId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling getEventById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEventById(Async)");
        }

        return getEventByIdCall(sourceId, id, _callback);

    }


    private ApiResponse<String> getEventByIdWithHttpInfo(String sourceId, String id) throws ApiException {
        okhttp3.Call localVarCall = getEventByIdValidateBeforeCall(sourceId, id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEventByIdAsync(String sourceId, String id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventByIdValidateBeforeCall(sourceId, id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEventByIdRequestBuilder {
        private final String sourceId;
        private final String id;

        private GetEventByIdRequestBuilder(String sourceId, String id) {
            this.sourceId = sourceId;
            this.id = id;
        }

        /**
         * Build call for getEventById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEventByIdCall(sourceId, id, _callback);
        }


        /**
         * Execute getEventById request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getEventByIdWithHttpInfo(sourceId, id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEventById request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getEventByIdWithHttpInfo(sourceId, id);
        }

        /**
         * Execute getEventById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getEventByIdAsync(sourceId, id, _callback);
        }
    }

    /**
     * Show Event
     * 
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @param id  (required)
     * @return GetEventByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetEventByIdRequestBuilder getEventById(String sourceId, String id) throws IllegalArgumentException {
        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetEventByIdRequestBuilder(sourceId, id);
    }
    private okhttp3.Call getEventsCall(String sourceId, String liveStream, OffsetDateTime start, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/events"
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (liveStream != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("live_stream", liveStream));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventsValidateBeforeCall(String sourceId, String liveStream, OffsetDateTime start, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling getEvents(Async)");
        }

        return getEventsCall(sourceId, liveStream, start, end, _callback);

    }


    private ApiResponse<String> getEventsWithHttpInfo(String sourceId, String liveStream, OffsetDateTime start, OffsetDateTime end) throws ApiException {
        okhttp3.Call localVarCall = getEventsValidateBeforeCall(sourceId, liveStream, start, end, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEventsAsync(String sourceId, String liveStream, OffsetDateTime start, OffsetDateTime end, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventsValidateBeforeCall(sourceId, liveStream, start, end, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEventsRequestBuilder {
        private final String sourceId;
        private String liveStream;
        private OffsetDateTime start;
        private OffsetDateTime end;

        private GetEventsRequestBuilder(String sourceId) {
            this.sourceId = sourceId;
        }

        /**
         * Set liveStream
         * @param liveStream Set this to true to only return events that show up in the live stream (optional, default to false)
         * @return GetEventsRequestBuilder
         */
        public GetEventsRequestBuilder liveStream(String liveStream) {
            this.liveStream = liveStream;
            return this;
        }
        
        /**
         * Set start
         * @param start  (optional)
         * @return GetEventsRequestBuilder
         */
        public GetEventsRequestBuilder start(OffsetDateTime start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set end
         * @param end  (optional)
         * @return GetEventsRequestBuilder
         */
        public GetEventsRequestBuilder end(OffsetDateTime end) {
            this.end = end;
            return this;
        }
        
        /**
         * Build call for getEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEventsCall(sourceId, liveStream, start, end, _callback);
        }


        /**
         * Execute getEvents request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getEventsWithHttpInfo(sourceId, liveStream, start, end);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEvents request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getEventsWithHttpInfo(sourceId, liveStream, start, end);
        }

        /**
         * Execute getEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getEventsAsync(sourceId, liveStream, start, end, _callback);
        }
    }

    /**
     * List Events
     * 
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @return GetEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetEventsRequestBuilder getEvents(String sourceId) throws IllegalArgumentException {
        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        return new GetEventsRequestBuilder(sourceId);
    }
    private okhttp3.Call getPlanCall(String oid, String sourceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/plans/{oid}"
            .replace("{" + "oid" + "}", localVarApiClient.escapeString(oid.toString()))
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlanValidateBeforeCall(String oid, String sourceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'oid' is set
        if (oid == null) {
            throw new ApiException("Missing the required parameter 'oid' when calling getPlan(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling getPlan(Async)");
        }

        return getPlanCall(oid, sourceId, _callback);

    }


    private ApiResponse<SourceGetPlanResponse> getPlanWithHttpInfo(String oid, String sourceId) throws ApiException {
        okhttp3.Call localVarCall = getPlanValidateBeforeCall(oid, sourceId, null);
        Type localVarReturnType = new TypeToken<SourceGetPlanResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPlanAsync(String oid, String sourceId, final ApiCallback<SourceGetPlanResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlanValidateBeforeCall(oid, sourceId, _callback);
        Type localVarReturnType = new TypeToken<SourceGetPlanResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPlanRequestBuilder {
        private final String oid;
        private final String sourceId;

        private GetPlanRequestBuilder(String oid, String sourceId) {
            this.oid = oid;
            this.sourceId = sourceId;
        }

        /**
         * Build call for getPlan
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPlanCall(oid, sourceId, _callback);
        }


        /**
         * Execute getPlan request
         * @return SourceGetPlanResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SourceGetPlanResponse execute() throws ApiException {
            ApiResponse<SourceGetPlanResponse> localVarResp = getPlanWithHttpInfo(oid, sourceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPlan request with HTTP info returned
         * @return ApiResponse&lt;SourceGetPlanResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SourceGetPlanResponse> executeWithHttpInfo() throws ApiException {
            return getPlanWithHttpInfo(oid, sourceId);
        }

        /**
         * Execute getPlan request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SourceGetPlanResponse> _callback) throws ApiException {
            return getPlanAsync(oid, sourceId, _callback);
        }
    }

    /**
     * Show Plan
     * 
     * @param oid  (required)
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @return GetPlanRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetPlanRequestBuilder getPlan(String oid, String sourceId) throws IllegalArgumentException {
        if (oid == null) throw new IllegalArgumentException("\"oid\" is required but got null");
            

        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        return new GetPlanRequestBuilder(oid, sourceId);
    }
    private okhttp3.Call getPlansListCall(String sourceId, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/plans"
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlansListValidateBeforeCall(String sourceId, String search, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling getPlansList(Async)");
        }

        return getPlansListCall(sourceId, search, _callback);

    }


    private ApiResponse<SourceGetPlansListResponse> getPlansListWithHttpInfo(String sourceId, String search) throws ApiException {
        okhttp3.Call localVarCall = getPlansListValidateBeforeCall(sourceId, search, null);
        Type localVarReturnType = new TypeToken<SourceGetPlansListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPlansListAsync(String sourceId, String search, final ApiCallback<SourceGetPlansListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlansListValidateBeforeCall(sourceId, search, _callback);
        Type localVarReturnType = new TypeToken<SourceGetPlansListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPlansListRequestBuilder {
        private final String sourceId;
        private String search;

        private GetPlansListRequestBuilder(String sourceId) {
            this.sourceId = sourceId;
        }

        /**
         * Set search
         * @param search Allows you to search based on the name or oid fields (optional)
         * @return GetPlansListRequestBuilder
         */
        public GetPlansListRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Build call for getPlansList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPlansListCall(sourceId, search, _callback);
        }


        /**
         * Execute getPlansList request
         * @return SourceGetPlansListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SourceGetPlansListResponse execute() throws ApiException {
            ApiResponse<SourceGetPlansListResponse> localVarResp = getPlansListWithHttpInfo(sourceId, search);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPlansList request with HTTP info returned
         * @return ApiResponse&lt;SourceGetPlansListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SourceGetPlansListResponse> executeWithHttpInfo() throws ApiException {
            return getPlansListWithHttpInfo(sourceId, search);
        }

        /**
         * Execute getPlansList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SourceGetPlansListResponse> _callback) throws ApiException {
            return getPlansListAsync(sourceId, search, _callback);
        }
    }

    /**
     * List Plans
     * 
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @return GetPlansListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetPlansListRequestBuilder getPlansList(String sourceId) throws IllegalArgumentException {
        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        return new GetPlansListRequestBuilder(sourceId);
    }
    private okhttp3.Call getRefundDetailsCall(String sourceId, String oid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/refunds/{oid}"
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()))
            .replace("{" + "oid" + "}", localVarApiClient.escapeString(oid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRefundDetailsValidateBeforeCall(String sourceId, String oid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling getRefundDetails(Async)");
        }

        // verify the required parameter 'oid' is set
        if (oid == null) {
            throw new ApiException("Missing the required parameter 'oid' when calling getRefundDetails(Async)");
        }

        return getRefundDetailsCall(sourceId, oid, _callback);

    }


    private ApiResponse<SourceGetRefundDetailsResponse> getRefundDetailsWithHttpInfo(String sourceId, String oid) throws ApiException {
        okhttp3.Call localVarCall = getRefundDetailsValidateBeforeCall(sourceId, oid, null);
        Type localVarReturnType = new TypeToken<SourceGetRefundDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRefundDetailsAsync(String sourceId, String oid, final ApiCallback<SourceGetRefundDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRefundDetailsValidateBeforeCall(sourceId, oid, _callback);
        Type localVarReturnType = new TypeToken<SourceGetRefundDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRefundDetailsRequestBuilder {
        private final String sourceId;
        private final String oid;

        private GetRefundDetailsRequestBuilder(String sourceId, String oid) {
            this.sourceId = sourceId;
            this.oid = oid;
        }

        /**
         * Build call for getRefundDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRefundDetailsCall(sourceId, oid, _callback);
        }


        /**
         * Execute getRefundDetails request
         * @return SourceGetRefundDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SourceGetRefundDetailsResponse execute() throws ApiException {
            ApiResponse<SourceGetRefundDetailsResponse> localVarResp = getRefundDetailsWithHttpInfo(sourceId, oid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRefundDetails request with HTTP info returned
         * @return ApiResponse&lt;SourceGetRefundDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SourceGetRefundDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getRefundDetailsWithHttpInfo(sourceId, oid);
        }

        /**
         * Execute getRefundDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SourceGetRefundDetailsResponse> _callback) throws ApiException {
            return getRefundDetailsAsync(sourceId, oid, _callback);
        }
    }

    /**
     * Show Refund
     * 
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @param oid  (required)
     * @return GetRefundDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetRefundDetailsRequestBuilder getRefundDetails(String sourceId, String oid) throws IllegalArgumentException {
        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        if (oid == null) throw new IllegalArgumentException("\"oid\" is required but got null");
            

        return new GetRefundDetailsRequestBuilder(sourceId, oid);
    }
    private okhttp3.Call getRefundsCall(String sourceId, OffsetDateTime start, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/refunds"
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRefundsValidateBeforeCall(String sourceId, OffsetDateTime start, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling getRefunds(Async)");
        }

        return getRefundsCall(sourceId, start, end, _callback);

    }


    private ApiResponse<SourceGetRefundsResponse> getRefundsWithHttpInfo(String sourceId, OffsetDateTime start, OffsetDateTime end) throws ApiException {
        okhttp3.Call localVarCall = getRefundsValidateBeforeCall(sourceId, start, end, null);
        Type localVarReturnType = new TypeToken<SourceGetRefundsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRefundsAsync(String sourceId, OffsetDateTime start, OffsetDateTime end, final ApiCallback<SourceGetRefundsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRefundsValidateBeforeCall(sourceId, start, end, _callback);
        Type localVarReturnType = new TypeToken<SourceGetRefundsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRefundsRequestBuilder {
        private final String sourceId;
        private OffsetDateTime start;
        private OffsetDateTime end;

        private GetRefundsRequestBuilder(String sourceId) {
            this.sourceId = sourceId;
        }

        /**
         * Set start
         * @param start  (optional)
         * @return GetRefundsRequestBuilder
         */
        public GetRefundsRequestBuilder start(OffsetDateTime start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set end
         * @param end  (optional)
         * @return GetRefundsRequestBuilder
         */
        public GetRefundsRequestBuilder end(OffsetDateTime end) {
            this.end = end;
            return this;
        }
        
        /**
         * Build call for getRefunds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRefundsCall(sourceId, start, end, _callback);
        }


        /**
         * Execute getRefunds request
         * @return SourceGetRefundsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SourceGetRefundsResponse execute() throws ApiException {
            ApiResponse<SourceGetRefundsResponse> localVarResp = getRefundsWithHttpInfo(sourceId, start, end);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRefunds request with HTTP info returned
         * @return ApiResponse&lt;SourceGetRefundsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SourceGetRefundsResponse> executeWithHttpInfo() throws ApiException {
            return getRefundsWithHttpInfo(sourceId, start, end);
        }

        /**
         * Execute getRefunds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SourceGetRefundsResponse> _callback) throws ApiException {
            return getRefundsAsync(sourceId, start, end, _callback);
        }
    }

    /**
     * List Refunds
     * 
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @return GetRefundsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetRefundsRequestBuilder getRefunds(String sourceId) throws IllegalArgumentException {
        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        return new GetRefundsRequestBuilder(sourceId);
    }
    private okhttp3.Call getSubscriptionCall(String oid, String sourceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/subscriptions/{oid}"
            .replace("{" + "oid" + "}", localVarApiClient.escapeString(oid.toString()))
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubscriptionValidateBeforeCall(String oid, String sourceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'oid' is set
        if (oid == null) {
            throw new ApiException("Missing the required parameter 'oid' when calling getSubscription(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling getSubscription(Async)");
        }

        return getSubscriptionCall(oid, sourceId, _callback);

    }


    private ApiResponse<String> getSubscriptionWithHttpInfo(String oid, String sourceId) throws ApiException {
        okhttp3.Call localVarCall = getSubscriptionValidateBeforeCall(oid, sourceId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSubscriptionAsync(String oid, String sourceId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubscriptionValidateBeforeCall(oid, sourceId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSubscriptionRequestBuilder {
        private final String oid;
        private final String sourceId;

        private GetSubscriptionRequestBuilder(String oid, String sourceId) {
            this.oid = oid;
            this.sourceId = sourceId;
        }

        /**
         * Build call for getSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSubscriptionCall(oid, sourceId, _callback);
        }


        /**
         * Execute getSubscription request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getSubscriptionWithHttpInfo(oid, sourceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSubscription request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getSubscriptionWithHttpInfo(oid, sourceId);
        }

        /**
         * Execute getSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getSubscriptionAsync(oid, sourceId, _callback);
        }
    }

    /**
     * Show Subscription
     * 
     * @param oid  (required)
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @return GetSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetSubscriptionRequestBuilder getSubscription(String oid, String sourceId) throws IllegalArgumentException {
        if (oid == null) throw new IllegalArgumentException("\"oid\" is required but got null");
            

        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        return new GetSubscriptionRequestBuilder(oid, sourceId);
    }
    private okhttp3.Call getSubscriptionsCall(String sourceId, String customerOid, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/subscriptions"
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customerOid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer_oid", customerOid));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubscriptionsValidateBeforeCall(String sourceId, String customerOid, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling getSubscriptions(Async)");
        }

        return getSubscriptionsCall(sourceId, customerOid, order, _callback);

    }


    private ApiResponse<String> getSubscriptionsWithHttpInfo(String sourceId, String customerOid, String order) throws ApiException {
        okhttp3.Call localVarCall = getSubscriptionsValidateBeforeCall(sourceId, customerOid, order, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSubscriptionsAsync(String sourceId, String customerOid, String order, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubscriptionsValidateBeforeCall(sourceId, customerOid, order, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSubscriptionsRequestBuilder {
        private final String sourceId;
        private String customerOid;
        private String order;

        private GetSubscriptionsRequestBuilder(String sourceId) {
            this.sourceId = sourceId;
        }

        /**
         * Set customerOid
         * @param customerOid This allows you to return subscriptions for a given customer (optional)
         * @return GetSubscriptionsRequestBuilder
         */
        public GetSubscriptionsRequestBuilder customerOid(String customerOid) {
            this.customerOid = customerOid;
            return this;
        }
        
        /**
         * Set order
         * @param order Allows you to order subscriptions from newest to oldest &#x60;desc&#x60; or oldest to newest &#x60;asc&#x60; (optional, default to desc)
         * @return GetSubscriptionsRequestBuilder
         */
        public GetSubscriptionsRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getSubscriptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSubscriptionsCall(sourceId, customerOid, order, _callback);
        }


        /**
         * Execute getSubscriptions request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getSubscriptionsWithHttpInfo(sourceId, customerOid, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSubscriptions request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getSubscriptionsWithHttpInfo(sourceId, customerOid, order);
        }

        /**
         * Execute getSubscriptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getSubscriptionsAsync(sourceId, customerOid, order, _callback);
        }
    }

    /**
     * List Subscriptions
     * Get all subscriptions linked to this API Key.
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @return GetSubscriptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetSubscriptionsRequestBuilder getSubscriptions(String sourceId) throws IllegalArgumentException {
        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        return new GetSubscriptionsRequestBuilder(sourceId);
    }
    private okhttp3.Call listCustomerEventsCall(String sourceId, String oid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/customers/{oid}/events"
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()))
            .replace("{" + "oid" + "}", localVarApiClient.escapeString(oid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCustomerEventsValidateBeforeCall(String sourceId, String oid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling listCustomerEvents(Async)");
        }

        // verify the required parameter 'oid' is set
        if (oid == null) {
            throw new ApiException("Missing the required parameter 'oid' when calling listCustomerEvents(Async)");
        }

        return listCustomerEventsCall(sourceId, oid, _callback);

    }


    private ApiResponse<SourceListCustomerEventsResponse> listCustomerEventsWithHttpInfo(String sourceId, String oid) throws ApiException {
        okhttp3.Call localVarCall = listCustomerEventsValidateBeforeCall(sourceId, oid, null);
        Type localVarReturnType = new TypeToken<SourceListCustomerEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCustomerEventsAsync(String sourceId, String oid, final ApiCallback<SourceListCustomerEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCustomerEventsValidateBeforeCall(sourceId, oid, _callback);
        Type localVarReturnType = new TypeToken<SourceListCustomerEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCustomerEventsRequestBuilder {
        private final String sourceId;
        private final String oid;

        private ListCustomerEventsRequestBuilder(String sourceId, String oid) {
            this.sourceId = sourceId;
            this.oid = oid;
        }

        /**
         * Build call for listCustomerEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCustomerEventsCall(sourceId, oid, _callback);
        }


        /**
         * Execute listCustomerEvents request
         * @return SourceListCustomerEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SourceListCustomerEventsResponse execute() throws ApiException {
            ApiResponse<SourceListCustomerEventsResponse> localVarResp = listCustomerEventsWithHttpInfo(sourceId, oid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCustomerEvents request with HTTP info returned
         * @return ApiResponse&lt;SourceListCustomerEventsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SourceListCustomerEventsResponse> executeWithHttpInfo() throws ApiException {
            return listCustomerEventsWithHttpInfo(sourceId, oid);
        }

        /**
         * Execute listCustomerEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SourceListCustomerEventsResponse> _callback) throws ApiException {
            return listCustomerEventsAsync(sourceId, oid, _callback);
        }
    }

    /**
     * List Customer Events
     * 
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @param oid  (required)
     * @return ListCustomerEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListCustomerEventsRequestBuilder listCustomerEvents(String sourceId, String oid) throws IllegalArgumentException {
        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        if (oid == null) throw new IllegalArgumentException("\"oid\" is required but got null");
            

        return new ListCustomerEventsRequestBuilder(sourceId, oid);
    }
    private okhttp3.Call listSourcesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/sources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSourcesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listSourcesCall(_callback);

    }


    private ApiResponse<SourceListSourcesResponse> listSourcesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listSourcesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SourceListSourcesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSourcesAsync(final ApiCallback<SourceListSourcesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSourcesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SourceListSourcesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSourcesRequestBuilder {

        private ListSourcesRequestBuilder() {
        }

        /**
         * Build call for listSources
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSourcesCall(_callback);
        }


        /**
         * Execute listSources request
         * @return SourceListSourcesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SourceListSourcesResponse execute() throws ApiException {
            ApiResponse<SourceListSourcesResponse> localVarResp = listSourcesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSources request with HTTP info returned
         * @return ApiResponse&lt;SourceListSourcesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SourceListSourcesResponse> executeWithHttpInfo() throws ApiException {
            return listSourcesWithHttpInfo();
        }

        /**
         * Execute listSources request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SourceListSourcesResponse> _callback) throws ApiException {
            return listSourcesAsync(_callback);
        }
    }

    /**
     * List Sources
     * 
     * @return ListSourcesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListSourcesRequestBuilder listSources() throws IllegalArgumentException {
        return new ListSourcesRequestBuilder();
    }
    private okhttp3.Call removeOneOffChargeCall(String sourceId, String oid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/charges/{oid}"
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()))
            .replace("{" + "oid" + "}", localVarApiClient.escapeString(oid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeOneOffChargeValidateBeforeCall(String sourceId, String oid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling removeOneOffCharge(Async)");
        }

        // verify the required parameter 'oid' is set
        if (oid == null) {
            throw new ApiException("Missing the required parameter 'oid' when calling removeOneOffCharge(Async)");
        }

        return removeOneOffChargeCall(sourceId, oid, _callback);

    }


    private ApiResponse<Object> removeOneOffChargeWithHttpInfo(String sourceId, String oid) throws ApiException {
        okhttp3.Call localVarCall = removeOneOffChargeValidateBeforeCall(sourceId, oid, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeOneOffChargeAsync(String sourceId, String oid, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeOneOffChargeValidateBeforeCall(sourceId, oid, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveOneOffChargeRequestBuilder {
        private final String sourceId;
        private final String oid;

        private RemoveOneOffChargeRequestBuilder(String sourceId, String oid) {
            this.sourceId = sourceId;
            this.oid = oid;
        }

        /**
         * Build call for removeOneOffCharge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeOneOffChargeCall(sourceId, oid, _callback);
        }


        /**
         * Execute removeOneOffCharge request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeOneOffChargeWithHttpInfo(sourceId, oid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeOneOffCharge request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeOneOffChargeWithHttpInfo(sourceId, oid);
        }

        /**
         * Execute removeOneOffCharge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeOneOffChargeAsync(sourceId, oid, _callback);
        }
    }

    /**
     * Delete Charge
     * Delete \&quot;One-Off\&quot; charges that are not linked to a subscription.
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @param oid  (required)
     * @return RemoveOneOffChargeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
     </table>
     */
    public RemoveOneOffChargeRequestBuilder removeOneOffCharge(String sourceId, String oid) throws IllegalArgumentException {
        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        if (oid == null) throw new IllegalArgumentException("\"oid\" is required but got null");
            

        return new RemoveOneOffChargeRequestBuilder(sourceId, oid);
    }
    private okhttp3.Call removeOneOffRefundCall(String sourceId, String oid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/refunds/{oid}"
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()))
            .replace("{" + "oid" + "}", localVarApiClient.escapeString(oid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeOneOffRefundValidateBeforeCall(String sourceId, String oid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling removeOneOffRefund(Async)");
        }

        // verify the required parameter 'oid' is set
        if (oid == null) {
            throw new ApiException("Missing the required parameter 'oid' when calling removeOneOffRefund(Async)");
        }

        return removeOneOffRefundCall(sourceId, oid, _callback);

    }


    private ApiResponse<Object> removeOneOffRefundWithHttpInfo(String sourceId, String oid) throws ApiException {
        okhttp3.Call localVarCall = removeOneOffRefundValidateBeforeCall(sourceId, oid, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeOneOffRefundAsync(String sourceId, String oid, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeOneOffRefundValidateBeforeCall(sourceId, oid, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveOneOffRefundRequestBuilder {
        private final String sourceId;
        private final String oid;

        private RemoveOneOffRefundRequestBuilder(String sourceId, String oid) {
            this.sourceId = sourceId;
            this.oid = oid;
        }

        /**
         * Build call for removeOneOffRefund
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeOneOffRefundCall(sourceId, oid, _callback);
        }


        /**
         * Execute removeOneOffRefund request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeOneOffRefundWithHttpInfo(sourceId, oid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeOneOffRefund request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeOneOffRefundWithHttpInfo(sourceId, oid);
        }

        /**
         * Execute removeOneOffRefund request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeOneOffRefundAsync(sourceId, oid, _callback);
        }
    }

    /**
     * Delete Refund
     * Delete \&quot;One-Off\&quot; refunds that are not linked to a subscription.
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @param oid  (required)
     * @return RemoveOneOffRefundRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
     </table>
     */
    public RemoveOneOffRefundRequestBuilder removeOneOffRefund(String sourceId, String oid) throws IllegalArgumentException {
        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        if (oid == null) throw new IllegalArgumentException("\"oid\" is required but got null");
            

        return new RemoveOneOffRefundRequestBuilder(sourceId, oid);
    }
    private okhttp3.Call removeSubscriptionCall(String oid, String sourceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/subscriptions/{oid}"
            .replace("{" + "oid" + "}", localVarApiClient.escapeString(oid.toString()))
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSubscriptionValidateBeforeCall(String oid, String sourceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'oid' is set
        if (oid == null) {
            throw new ApiException("Missing the required parameter 'oid' when calling removeSubscription(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling removeSubscription(Async)");
        }

        return removeSubscriptionCall(oid, sourceId, _callback);

    }


    private ApiResponse<Object> removeSubscriptionWithHttpInfo(String oid, String sourceId) throws ApiException {
        okhttp3.Call localVarCall = removeSubscriptionValidateBeforeCall(oid, sourceId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeSubscriptionAsync(String oid, String sourceId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSubscriptionValidateBeforeCall(oid, sourceId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveSubscriptionRequestBuilder {
        private final String oid;
        private final String sourceId;

        private RemoveSubscriptionRequestBuilder(String oid, String sourceId) {
            this.oid = oid;
            this.sourceId = sourceId;
        }

        /**
         * Build call for removeSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeSubscriptionCall(oid, sourceId, _callback);
        }


        /**
         * Execute removeSubscription request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeSubscriptionWithHttpInfo(oid, sourceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeSubscription request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeSubscriptionWithHttpInfo(oid, sourceId);
        }

        /**
         * Execute removeSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeSubscriptionAsync(oid, sourceId, _callback);
        }
    }

    /**
     * Delete Subscription
     * 
     * @param oid  (required)
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @return RemoveSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSubscriptionRequestBuilder removeSubscription(String oid, String sourceId) throws IllegalArgumentException {
        if (oid == null) throw new IllegalArgumentException("\"oid\" is required but got null");
            

        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        return new RemoveSubscriptionRequestBuilder(oid, sourceId);
    }
    private okhttp3.Call updateCustomerInformationCall(String customerOid, String sourceId, SourceUpdateCustomerInformationRequest sourceUpdateCustomerInformationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sourceUpdateCustomerInformationRequest;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/customers/{customer_oid}"
            .replace("{" + "customer_oid" + "}", localVarApiClient.escapeString(customerOid.toString()))
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomerInformationValidateBeforeCall(String customerOid, String sourceId, SourceUpdateCustomerInformationRequest sourceUpdateCustomerInformationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerOid' is set
        if (customerOid == null) {
            throw new ApiException("Missing the required parameter 'customerOid' when calling updateCustomerInformation(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling updateCustomerInformation(Async)");
        }

        return updateCustomerInformationCall(customerOid, sourceId, sourceUpdateCustomerInformationRequest, _callback);

    }


    private ApiResponse<SourceUpdateCustomerInformationResponse> updateCustomerInformationWithHttpInfo(String customerOid, String sourceId, SourceUpdateCustomerInformationRequest sourceUpdateCustomerInformationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCustomerInformationValidateBeforeCall(customerOid, sourceId, sourceUpdateCustomerInformationRequest, null);
        Type localVarReturnType = new TypeToken<SourceUpdateCustomerInformationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCustomerInformationAsync(String customerOid, String sourceId, SourceUpdateCustomerInformationRequest sourceUpdateCustomerInformationRequest, final ApiCallback<SourceUpdateCustomerInformationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomerInformationValidateBeforeCall(customerOid, sourceId, sourceUpdateCustomerInformationRequest, _callback);
        Type localVarReturnType = new TypeToken<SourceUpdateCustomerInformationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCustomerInformationRequestBuilder {
        private final String customerOid;
        private final String sourceId;
        private String name;
        private String notes;
        private OffsetDateTime created;
        private String email;

        private UpdateCustomerInformationRequestBuilder(String customerOid, String sourceId) {
            this.customerOid = customerOid;
            this.sourceId = sourceId;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return UpdateCustomerInformationRequestBuilder
         */
        public UpdateCustomerInformationRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set notes
         * @param notes  (optional)
         * @return UpdateCustomerInformationRequestBuilder
         */
        public UpdateCustomerInformationRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Set created
         * @param created Unix timestamp of when this customer was created (optional)
         * @return UpdateCustomerInformationRequestBuilder
         */
        public UpdateCustomerInformationRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set email
         * @param email Email for this customer (optional)
         * @return UpdateCustomerInformationRequestBuilder
         */
        public UpdateCustomerInformationRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Build call for updateCustomerInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SourceUpdateCustomerInformationRequest sourceUpdateCustomerInformationRequest = buildBodyParams();
            return updateCustomerInformationCall(customerOid, sourceId, sourceUpdateCustomerInformationRequest, _callback);
        }

        private SourceUpdateCustomerInformationRequest buildBodyParams() {
            SourceUpdateCustomerInformationRequest sourceUpdateCustomerInformationRequest = new SourceUpdateCustomerInformationRequest();
            sourceUpdateCustomerInformationRequest.name(this.name);
            sourceUpdateCustomerInformationRequest.notes(this.notes);
            sourceUpdateCustomerInformationRequest.created(this.created);
            sourceUpdateCustomerInformationRequest.email(this.email);
            return sourceUpdateCustomerInformationRequest;
        }

        /**
         * Execute updateCustomerInformation request
         * @return SourceUpdateCustomerInformationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SourceUpdateCustomerInformationResponse execute() throws ApiException {
            SourceUpdateCustomerInformationRequest sourceUpdateCustomerInformationRequest = buildBodyParams();
            ApiResponse<SourceUpdateCustomerInformationResponse> localVarResp = updateCustomerInformationWithHttpInfo(customerOid, sourceId, sourceUpdateCustomerInformationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCustomerInformation request with HTTP info returned
         * @return ApiResponse&lt;SourceUpdateCustomerInformationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SourceUpdateCustomerInformationResponse> executeWithHttpInfo() throws ApiException {
            SourceUpdateCustomerInformationRequest sourceUpdateCustomerInformationRequest = buildBodyParams();
            return updateCustomerInformationWithHttpInfo(customerOid, sourceId, sourceUpdateCustomerInformationRequest);
        }

        /**
         * Execute updateCustomerInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SourceUpdateCustomerInformationResponse> _callback) throws ApiException {
            SourceUpdateCustomerInformationRequest sourceUpdateCustomerInformationRequest = buildBodyParams();
            return updateCustomerInformationAsync(customerOid, sourceId, sourceUpdateCustomerInformationRequest, _callback);
        }
    }

    /**
     * Update Customer
     * This endpoint allows you to update the basic information stored on a Customer, such as first name, last name and notes
     * @param customerOid Your unique ID for the customer (required)
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @return UpdateCustomerInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCustomerInformationRequestBuilder updateCustomerInformation(String customerOid, String sourceId) throws IllegalArgumentException {
        if (customerOid == null) throw new IllegalArgumentException("\"customerOid\" is required but got null");
            

        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        return new UpdateCustomerInformationRequestBuilder(customerOid, sourceId);
    }
    private okhttp3.Call updatePlanCall(String planOid, String sourceId, SourceUpdatePlanRequest sourceUpdatePlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sourceUpdatePlanRequest;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/plans/{plan_oid}"
            .replace("{" + "plan_oid" + "}", localVarApiClient.escapeString(planOid.toString()))
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePlanValidateBeforeCall(String planOid, String sourceId, SourceUpdatePlanRequest sourceUpdatePlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planOid' is set
        if (planOid == null) {
            throw new ApiException("Missing the required parameter 'planOid' when calling updatePlan(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling updatePlan(Async)");
        }

        return updatePlanCall(planOid, sourceId, sourceUpdatePlanRequest, _callback);

    }


    private ApiResponse<SourceUpdatePlanResponse> updatePlanWithHttpInfo(String planOid, String sourceId, SourceUpdatePlanRequest sourceUpdatePlanRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePlanValidateBeforeCall(planOid, sourceId, sourceUpdatePlanRequest, null);
        Type localVarReturnType = new TypeToken<SourceUpdatePlanResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePlanAsync(String planOid, String sourceId, SourceUpdatePlanRequest sourceUpdatePlanRequest, final ApiCallback<SourceUpdatePlanResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePlanValidateBeforeCall(planOid, sourceId, sourceUpdatePlanRequest, _callback);
        Type localVarReturnType = new TypeToken<SourceUpdatePlanResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePlanRequestBuilder {
        private final String name;
        private final String planOid;
        private final String sourceId;

        private UpdatePlanRequestBuilder(String name, String planOid, String sourceId) {
            this.name = name;
            this.planOid = planOid;
            this.sourceId = sourceId;
        }

        /**
         * Build call for updatePlan
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SourceUpdatePlanRequest sourceUpdatePlanRequest = buildBodyParams();
            return updatePlanCall(planOid, sourceId, sourceUpdatePlanRequest, _callback);
        }

        private SourceUpdatePlanRequest buildBodyParams() {
            SourceUpdatePlanRequest sourceUpdatePlanRequest = new SourceUpdatePlanRequest();
            sourceUpdatePlanRequest.name(this.name);
            return sourceUpdatePlanRequest;
        }

        /**
         * Execute updatePlan request
         * @return SourceUpdatePlanResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SourceUpdatePlanResponse execute() throws ApiException {
            SourceUpdatePlanRequest sourceUpdatePlanRequest = buildBodyParams();
            ApiResponse<SourceUpdatePlanResponse> localVarResp = updatePlanWithHttpInfo(planOid, sourceId, sourceUpdatePlanRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePlan request with HTTP info returned
         * @return ApiResponse&lt;SourceUpdatePlanResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SourceUpdatePlanResponse> executeWithHttpInfo() throws ApiException {
            SourceUpdatePlanRequest sourceUpdatePlanRequest = buildBodyParams();
            return updatePlanWithHttpInfo(planOid, sourceId, sourceUpdatePlanRequest);
        }

        /**
         * Execute updatePlan request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SourceUpdatePlanResponse> _callback) throws ApiException {
            SourceUpdatePlanRequest sourceUpdatePlanRequest = buildBodyParams();
            return updatePlanAsync(planOid, sourceId, sourceUpdatePlanRequest, _callback);
        }
    }

    /**
     * Update Plan
     * 
     * @param planOid Your interval plan id (required)
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @return UpdatePlanRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePlanRequestBuilder updatePlan(String name, String planOid, String sourceId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (planOid == null) throw new IllegalArgumentException("\"planOid\" is required but got null");
            

        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        return new UpdatePlanRequestBuilder(name, planOid, sourceId);
    }
    private okhttp3.Call updateSubscriptionCall(String subscriptionOid, String sourceId, SourceUpdateSubscriptionRequest sourceUpdateSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sourceUpdateSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/v1/{source_id}/subscriptions/{subscription_oid}"
            .replace("{" + "subscription_oid" + "}", localVarApiClient.escapeString(subscriptionOid.toString()))
            .replace("{" + "source_id" + "}", localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscriptionValidateBeforeCall(String subscriptionOid, String sourceId, SourceUpdateSubscriptionRequest sourceUpdateSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionOid' is set
        if (subscriptionOid == null) {
            throw new ApiException("Missing the required parameter 'subscriptionOid' when calling updateSubscription(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException("Missing the required parameter 'sourceId' when calling updateSubscription(Async)");
        }

        return updateSubscriptionCall(subscriptionOid, sourceId, sourceUpdateSubscriptionRequest, _callback);

    }


    private ApiResponse<SourceUpdateSubscriptionResponse> updateSubscriptionWithHttpInfo(String subscriptionOid, String sourceId, SourceUpdateSubscriptionRequest sourceUpdateSubscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSubscriptionValidateBeforeCall(subscriptionOid, sourceId, sourceUpdateSubscriptionRequest, null);
        Type localVarReturnType = new TypeToken<SourceUpdateSubscriptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSubscriptionAsync(String subscriptionOid, String sourceId, SourceUpdateSubscriptionRequest sourceUpdateSubscriptionRequest, final ApiCallback<SourceUpdateSubscriptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscriptionValidateBeforeCall(subscriptionOid, sourceId, sourceUpdateSubscriptionRequest, _callback);
        Type localVarReturnType = new TypeToken<SourceUpdateSubscriptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSubscriptionRequestBuilder {
        private final String planOid;
        private final String subscriptionOid;
        private final String sourceId;
        private OffsetDateTime occurredAt;
        private List<SourceCreateSubscriptionRequestAddonsInner> addons;
        private Integer quantity;
        private Integer discount;

        private UpdateSubscriptionRequestBuilder(String planOid, String subscriptionOid, String sourceId) {
            this.planOid = planOid;
            this.subscriptionOid = subscriptionOid;
            this.sourceId = sourceId;
        }

        /**
         * Set occurredAt
         * @param occurredAt A unix timestamp of when this change occurred. Defaults to now (optional)
         * @return UpdateSubscriptionRequestBuilder
         */
        public UpdateSubscriptionRequestBuilder occurredAt(OffsetDateTime occurredAt) {
            this.occurredAt = occurredAt;
            return this;
        }
        
        /**
         * Set addons
         * @param addons In cents. The OID can be anything you want. (optional)
         * @return UpdateSubscriptionRequestBuilder
         */
        public UpdateSubscriptionRequestBuilder addons(List<SourceCreateSubscriptionRequestAddonsInner> addons) {
            this.addons = addons;
            return this;
        }
        
        /**
         * Set quantity
         * @param quantity  (optional, default to 1)
         * @return UpdateSubscriptionRequestBuilder
         */
        public UpdateSubscriptionRequestBuilder quantity(Integer quantity) {
            this.quantity = quantity;
            return this;
        }
        
        /**
         * Set discount
         * @param discount Integer value (in the same currency as the plan) (optional)
         * @return UpdateSubscriptionRequestBuilder
         */
        public UpdateSubscriptionRequestBuilder discount(Integer discount) {
            this.discount = discount;
            return this;
        }
        
        /**
         * Build call for updateSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SourceUpdateSubscriptionRequest sourceUpdateSubscriptionRequest = buildBodyParams();
            return updateSubscriptionCall(subscriptionOid, sourceId, sourceUpdateSubscriptionRequest, _callback);
        }

        private SourceUpdateSubscriptionRequest buildBodyParams() {
            SourceUpdateSubscriptionRequest sourceUpdateSubscriptionRequest = new SourceUpdateSubscriptionRequest();
            sourceUpdateSubscriptionRequest.planOid(this.planOid);
            sourceUpdateSubscriptionRequest.occurredAt(this.occurredAt);
            sourceUpdateSubscriptionRequest.addons(this.addons);
            sourceUpdateSubscriptionRequest.quantity(this.quantity);
            sourceUpdateSubscriptionRequest.discount(this.discount);
            return sourceUpdateSubscriptionRequest;
        }

        /**
         * Execute updateSubscription request
         * @return SourceUpdateSubscriptionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SourceUpdateSubscriptionResponse execute() throws ApiException {
            SourceUpdateSubscriptionRequest sourceUpdateSubscriptionRequest = buildBodyParams();
            ApiResponse<SourceUpdateSubscriptionResponse> localVarResp = updateSubscriptionWithHttpInfo(subscriptionOid, sourceId, sourceUpdateSubscriptionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSubscription request with HTTP info returned
         * @return ApiResponse&lt;SourceUpdateSubscriptionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SourceUpdateSubscriptionResponse> executeWithHttpInfo() throws ApiException {
            SourceUpdateSubscriptionRequest sourceUpdateSubscriptionRequest = buildBodyParams();
            return updateSubscriptionWithHttpInfo(subscriptionOid, sourceId, sourceUpdateSubscriptionRequest);
        }

        /**
         * Execute updateSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SourceUpdateSubscriptionResponse> _callback) throws ApiException {
            SourceUpdateSubscriptionRequest sourceUpdateSubscriptionRequest = buildBodyParams();
            return updateSubscriptionAsync(subscriptionOid, sourceId, sourceUpdateSubscriptionRequest, _callback);
        }
    }

    /**
     * Update Subscription
     * This allows you to update a Subscription, such as changing plans and addons.
     * @param subscriptionOid Your unique ID for the subscription (required)
     * @param sourceId Please see [Sources](ref:sources) (required)
     * @return UpdateSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSubscriptionRequestBuilder updateSubscription(String planOid, String subscriptionOid, String sourceId) throws IllegalArgumentException {
        if (planOid == null) throw new IllegalArgumentException("\"planOid\" is required but got null");
            

        if (subscriptionOid == null) throw new IllegalArgumentException("\"subscriptionOid\" is required but got null");
            

        if (sourceId == null) throw new IllegalArgumentException("\"sourceId\" is required but got null");
            

        return new UpdateSubscriptionRequestBuilder(planOid, subscriptionOid, sourceId);
    }
}
