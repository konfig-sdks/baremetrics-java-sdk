/*
 * Production
 * Baremetrics provides real-time subscription metrics for teams built with Stripe, Shopify Partners, Braintree, Recurly, Chargebee, Google Play, and App Store Connect.   In addition to metrics, Baremetrics provides tools that help you reduce churn and grow your business faster:   Recover: Prevent failed charges and keep your hard-earned revenue with our 100% automated toolkit.   Cancellation insights: Learn exactly why your customers cancel, calculate lost revenue by cancellation reason, and send automated emails to win customers back.  Flightpath: Plan for the future with flexible financial modeling tools built for growing SaaS companies.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EventCreateInsightEventRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EventCreateInsightEventRequest {
  public static final String SERIALIZED_NAME_REASON_ID = "reason_id";
  @SerializedName(SERIALIZED_NAME_REASON_ID)
  private String reasonId;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_CUSTOMER_OID = "customer_oid";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_OID)
  private String customerOid;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_OIDS = "subscription_oids";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_OIDS)
  private List<String> subscriptionOids = null;

  public EventCreateInsightEventRequest() {
  }

  public EventCreateInsightEventRequest reasonId(String reasonId) {
    
    
    
    
    this.reasonId = reasonId;
    return this;
  }

   /**
   * Get reasonId
   * @return reasonId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getReasonId() {
    return reasonId;
  }


  public void setReasonId(String reasonId) {
    
    
    
    this.reasonId = reasonId;
  }


  public EventCreateInsightEventRequest comment(String comment) {
    
    
    
    
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    
    
    
    this.comment = comment;
  }


  public EventCreateInsightEventRequest customerOid(String customerOid) {
    
    
    
    
    this.customerOid = customerOid;
    return this;
  }

   /**
   * Get customerOid
   * @return customerOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCustomerOid() {
    return customerOid;
  }


  public void setCustomerOid(String customerOid) {
    
    
    
    this.customerOid = customerOid;
  }


  public EventCreateInsightEventRequest subscriptionOids(List<String> subscriptionOids) {
    
    
    
    
    this.subscriptionOids = subscriptionOids;
    return this;
  }

  public EventCreateInsightEventRequest addSubscriptionOidsItem(String subscriptionOidsItem) {
    if (this.subscriptionOids == null) {
      this.subscriptionOids = new ArrayList<>();
    }
    this.subscriptionOids.add(subscriptionOidsItem);
    return this;
  }

   /**
   * Get subscriptionOids
   * @return subscriptionOids
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getSubscriptionOids() {
    return subscriptionOids;
  }


  public void setSubscriptionOids(List<String> subscriptionOids) {
    
    
    
    this.subscriptionOids = subscriptionOids;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EventCreateInsightEventRequest instance itself
   */
  public EventCreateInsightEventRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventCreateInsightEventRequest eventCreateInsightEventRequest = (EventCreateInsightEventRequest) o;
    return Objects.equals(this.reasonId, eventCreateInsightEventRequest.reasonId) &&
        Objects.equals(this.comment, eventCreateInsightEventRequest.comment) &&
        Objects.equals(this.customerOid, eventCreateInsightEventRequest.customerOid) &&
        Objects.equals(this.subscriptionOids, eventCreateInsightEventRequest.subscriptionOids)&&
        Objects.equals(this.additionalProperties, eventCreateInsightEventRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reasonId, comment, customerOid, subscriptionOids, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventCreateInsightEventRequest {\n");
    sb.append("    reasonId: ").append(toIndentedString(reasonId)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    customerOid: ").append(toIndentedString(customerOid)).append("\n");
    sb.append("    subscriptionOids: ").append(toIndentedString(subscriptionOids)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("reason_id");
    openapiFields.add("comment");
    openapiFields.add("customer_oid");
    openapiFields.add("subscription_oids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("reason_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EventCreateInsightEventRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EventCreateInsightEventRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventCreateInsightEventRequest is not found in the empty JSON string", EventCreateInsightEventRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventCreateInsightEventRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("reason_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason_id").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("customer_oid") != null && !jsonObj.get("customer_oid").isJsonNull()) && !jsonObj.get("customer_oid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_oid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_oid").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subscription_oids") != null && !jsonObj.get("subscription_oids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription_oids` to be an array in the JSON string but got `%s`", jsonObj.get("subscription_oids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventCreateInsightEventRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventCreateInsightEventRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventCreateInsightEventRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventCreateInsightEventRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EventCreateInsightEventRequest>() {
           @Override
           public void write(JsonWriter out, EventCreateInsightEventRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EventCreateInsightEventRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EventCreateInsightEventRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventCreateInsightEventRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventCreateInsightEventRequest
  * @throws IOException if the JSON string is invalid with respect to EventCreateInsightEventRequest
  */
  public static EventCreateInsightEventRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventCreateInsightEventRequest.class);
  }

 /**
  * Convert an instance of EventCreateInsightEventRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

