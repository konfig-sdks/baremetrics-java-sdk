/*
 * Production
 * Baremetrics provides real-time subscription metrics for teams built with Stripe, Shopify Partners, Braintree, Recurly, Chargebee, Google Play, and App Store Connect.   In addition to metrics, Baremetrics provides tools that help you reduce churn and grow your business faster:   Recover: Prevent failed charges and keep your hard-earned revenue with our 100% automated toolkit.   Cancellation insights: Learn exactly why your customers cancel, calculate lost revenue by cancellation reason, and send automated emails to win customers back.  Flightpath: Plan for the future with flexible financial modeling tools built for growing SaaS companies.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * MetricShowDetailsResponseMetricsInnerPrevious
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MetricShowDetailsResponseMetricsInnerPrevious {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private Integer date = 0;

  public static final String SERIALIZED_NAME_HUMAN_DATE = "human_date";
  @SerializedName(SERIALIZED_NAME_HUMAN_DATE)
  private String humanDate;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Integer value = 0;

  public static final String SERIALIZED_NAME_PERCENT = "percent";
  @SerializedName(SERIALIZED_NAME_PERCENT)
  private Double percent = 0d;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private Object notes = null;

  public MetricShowDetailsResponseMetricsInnerPrevious() {
  }

  public MetricShowDetailsResponseMetricsInnerPrevious date(Integer date) {
    
    
    
    
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1477526400", value = "")

  public Integer getDate() {
    return date;
  }


  public void setDate(Integer date) {
    
    
    
    this.date = date;
  }


  public MetricShowDetailsResponseMetricsInnerPrevious humanDate(String humanDate) {
    
    
    
    
    this.humanDate = humanDate;
    return this;
  }

   /**
   * Get humanDate
   * @return humanDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2016-10-27", value = "")

  public String getHumanDate() {
    return humanDate;
  }


  public void setHumanDate(String humanDate) {
    
    
    
    this.humanDate = humanDate;
  }


  public MetricShowDetailsResponseMetricsInnerPrevious value(Integer value) {
    
    
    
    
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5941979", value = "")

  public Integer getValue() {
    return value;
  }


  public void setValue(Integer value) {
    
    
    
    this.value = value;
  }


  public MetricShowDetailsResponseMetricsInnerPrevious percent(Double percent) {
    
    
    
    
    this.percent = percent;
    return this;
  }

  public MetricShowDetailsResponseMetricsInnerPrevious percent(Integer percent) {
    
    
    
    
    this.percent = percent.doubleValue();
    return this;
  }

   /**
   * Get percent
   * @return percent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1.4", value = "")

  public Double getPercent() {
    return percent;
  }


  public void setPercent(Double percent) {
    
    
    
    this.percent = percent;
  }


  public MetricShowDetailsResponseMetricsInnerPrevious notes(Object notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

   /**
   * Get notes
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getNotes() {
    return notes;
  }


  public void setNotes(Object notes) {
    
    
    
    this.notes = notes;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MetricShowDetailsResponseMetricsInnerPrevious instance itself
   */
  public MetricShowDetailsResponseMetricsInnerPrevious putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricShowDetailsResponseMetricsInnerPrevious metricShowDetailsResponseMetricsInnerPrevious = (MetricShowDetailsResponseMetricsInnerPrevious) o;
    return Objects.equals(this.date, metricShowDetailsResponseMetricsInnerPrevious.date) &&
        Objects.equals(this.humanDate, metricShowDetailsResponseMetricsInnerPrevious.humanDate) &&
        Objects.equals(this.value, metricShowDetailsResponseMetricsInnerPrevious.value) &&
        Objects.equals(this.percent, metricShowDetailsResponseMetricsInnerPrevious.percent) &&
        Objects.equals(this.notes, metricShowDetailsResponseMetricsInnerPrevious.notes)&&
        Objects.equals(this.additionalProperties, metricShowDetailsResponseMetricsInnerPrevious.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, humanDate, value, percent, notes, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricShowDetailsResponseMetricsInnerPrevious {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    humanDate: ").append(toIndentedString(humanDate)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    percent: ").append(toIndentedString(percent)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("human_date");
    openapiFields.add("value");
    openapiFields.add("percent");
    openapiFields.add("notes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MetricShowDetailsResponseMetricsInnerPrevious
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MetricShowDetailsResponseMetricsInnerPrevious.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricShowDetailsResponseMetricsInnerPrevious is not found in the empty JSON string", MetricShowDetailsResponseMetricsInnerPrevious.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("human_date") != null && !jsonObj.get("human_date").isJsonNull()) && !jsonObj.get("human_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `human_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("human_date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricShowDetailsResponseMetricsInnerPrevious.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricShowDetailsResponseMetricsInnerPrevious' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricShowDetailsResponseMetricsInnerPrevious> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricShowDetailsResponseMetricsInnerPrevious.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricShowDetailsResponseMetricsInnerPrevious>() {
           @Override
           public void write(JsonWriter out, MetricShowDetailsResponseMetricsInnerPrevious value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricShowDetailsResponseMetricsInnerPrevious read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MetricShowDetailsResponseMetricsInnerPrevious instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MetricShowDetailsResponseMetricsInnerPrevious given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MetricShowDetailsResponseMetricsInnerPrevious
  * @throws IOException if the JSON string is invalid with respect to MetricShowDetailsResponseMetricsInnerPrevious
  */
  public static MetricShowDetailsResponseMetricsInnerPrevious fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricShowDetailsResponseMetricsInnerPrevious.class);
  }

 /**
  * Convert an instance of MetricShowDetailsResponseMetricsInnerPrevious to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

