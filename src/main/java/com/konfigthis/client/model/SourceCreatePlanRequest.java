/*
 * Production
 * Baremetrics provides real-time subscription metrics for teams built with Stripe, Shopify Partners, Braintree, Recurly, Chargebee, Google Play, and App Store Connect.   In addition to metrics, Baremetrics provides tools that help you reduce churn and grow your business faster:   Recover: Prevent failed charges and keep your hard-earned revenue with our 100% automated toolkit.   Cancellation insights: Learn exactly why your customers cancel, calculate lost revenue by cancellation reason, and send automated emails to win customers back.  Flightpath: Plan for the future with flexible financial modeling tools built for growing SaaS companies.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SourceCreatePlanRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SourceCreatePlanRequest {
  public static final String SERIALIZED_NAME_OID = "oid";
  @SerializedName(SERIALIZED_NAME_OID)
  private String oid;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private String interval;

  public static final String SERIALIZED_NAME_INTERVAL_COUNT = "interval_count";
  @SerializedName(SERIALIZED_NAME_INTERVAL_COUNT)
  private Integer intervalCount;

  public static final String SERIALIZED_NAME_TRIAL_DURATION = "trial_duration";
  @SerializedName(SERIALIZED_NAME_TRIAL_DURATION)
  private Integer trialDuration = 0;

  public static final String SERIALIZED_NAME_TRIAL_DURATION_UNIT = "trial_duration_unit";
  @SerializedName(SERIALIZED_NAME_TRIAL_DURATION_UNIT)
  private String trialDurationUnit = "day";

  public SourceCreatePlanRequest() {
  }

  public SourceCreatePlanRequest oid(String oid) {
    
    
    
    
    this.oid = oid;
    return this;
  }

   /**
   * Your unique ID for the plan
   * @return oid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Your unique ID for the plan")

  public String getOid() {
    return oid;
  }


  public void setOid(String oid) {
    
    
    
    this.oid = oid;
  }


  public SourceCreatePlanRequest name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Your internal name for this plan. This will be displayed in the Plan Breakout section
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Your internal name for this plan. This will be displayed in the Plan Breakout section")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public SourceCreatePlanRequest currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * The ISO code of the currency of this plan. E.G: usd
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ISO code of the currency of this plan. E.G: usd")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public SourceCreatePlanRequest amount(Integer amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * How much is this plan? (In cents)
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "How much is this plan? (In cents)")

  public Integer getAmount() {
    return amount;
  }


  public void setAmount(Integer amount) {
    
    
    
    this.amount = amount;
  }


  public SourceCreatePlanRequest interval(String interval) {
    
    
    
    
    this.interval = interval;
    return this;
  }

   /**
   * day, month or year
   * @return interval
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "day, month or year")

  public String getInterval() {
    return interval;
  }


  public void setInterval(String interval) {
    
    
    
    this.interval = interval;
  }


  public SourceCreatePlanRequest intervalCount(Integer intervalCount) {
    
    
    
    
    this.intervalCount = intervalCount;
    return this;
  }

   /**
   * Get intervalCount
   * @return intervalCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getIntervalCount() {
    return intervalCount;
  }


  public void setIntervalCount(Integer intervalCount) {
    
    
    
    this.intervalCount = intervalCount;
  }


  public SourceCreatePlanRequest trialDuration(Integer trialDuration) {
    
    
    
    
    this.trialDuration = trialDuration;
    return this;
  }

   /**
   * The duration of this trial. This is to be used in conjunction with trial_duration_unit
   * @return trialDuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "The duration of this trial. This is to be used in conjunction with trial_duration_unit")

  public Integer getTrialDuration() {
    return trialDuration;
  }


  public void setTrialDuration(Integer trialDuration) {
    
    
    
    this.trialDuration = trialDuration;
  }


  public SourceCreatePlanRequest trialDurationUnit(String trialDurationUnit) {
    
    
    
    
    this.trialDurationUnit = trialDurationUnit;
    return this;
  }

   /**
   * This is to be used in conjunction with trial_duration
   * @return trialDurationUnit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "day", value = "This is to be used in conjunction with trial_duration")

  public String getTrialDurationUnit() {
    return trialDurationUnit;
  }


  public void setTrialDurationUnit(String trialDurationUnit) {
    
    
    
    this.trialDurationUnit = trialDurationUnit;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SourceCreatePlanRequest instance itself
   */
  public SourceCreatePlanRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceCreatePlanRequest sourceCreatePlanRequest = (SourceCreatePlanRequest) o;
    return Objects.equals(this.oid, sourceCreatePlanRequest.oid) &&
        Objects.equals(this.name, sourceCreatePlanRequest.name) &&
        Objects.equals(this.currency, sourceCreatePlanRequest.currency) &&
        Objects.equals(this.amount, sourceCreatePlanRequest.amount) &&
        Objects.equals(this.interval, sourceCreatePlanRequest.interval) &&
        Objects.equals(this.intervalCount, sourceCreatePlanRequest.intervalCount) &&
        Objects.equals(this.trialDuration, sourceCreatePlanRequest.trialDuration) &&
        Objects.equals(this.trialDurationUnit, sourceCreatePlanRequest.trialDurationUnit)&&
        Objects.equals(this.additionalProperties, sourceCreatePlanRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(oid, name, currency, amount, interval, intervalCount, trialDuration, trialDurationUnit, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceCreatePlanRequest {\n");
    sb.append("    oid: ").append(toIndentedString(oid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    intervalCount: ").append(toIndentedString(intervalCount)).append("\n");
    sb.append("    trialDuration: ").append(toIndentedString(trialDuration)).append("\n");
    sb.append("    trialDurationUnit: ").append(toIndentedString(trialDurationUnit)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("oid");
    openapiFields.add("name");
    openapiFields.add("currency");
    openapiFields.add("amount");
    openapiFields.add("interval");
    openapiFields.add("interval_count");
    openapiFields.add("trial_duration");
    openapiFields.add("trial_duration_unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("oid");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("interval");
    openapiRequiredFields.add("interval_count");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SourceCreatePlanRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SourceCreatePlanRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceCreatePlanRequest is not found in the empty JSON string", SourceCreatePlanRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SourceCreatePlanRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("oid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oid").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval").toString()));
      }
      if ((jsonObj.get("trial_duration_unit") != null && !jsonObj.get("trial_duration_unit").isJsonNull()) && !jsonObj.get("trial_duration_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trial_duration_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trial_duration_unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceCreatePlanRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceCreatePlanRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceCreatePlanRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceCreatePlanRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceCreatePlanRequest>() {
           @Override
           public void write(JsonWriter out, SourceCreatePlanRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceCreatePlanRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SourceCreatePlanRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SourceCreatePlanRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SourceCreatePlanRequest
  * @throws IOException if the JSON string is invalid with respect to SourceCreatePlanRequest
  */
  public static SourceCreatePlanRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceCreatePlanRequest.class);
  }

 /**
  * Convert an instance of SourceCreatePlanRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

