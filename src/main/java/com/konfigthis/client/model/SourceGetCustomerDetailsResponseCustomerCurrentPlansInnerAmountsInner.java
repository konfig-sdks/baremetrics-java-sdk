/*
 * Production
 * Baremetrics provides real-time subscription metrics for teams built with Stripe, Shopify Partners, Braintree, Recurly, Chargebee, Google Play, and App Store Connect.   In addition to metrics, Baremetrics provides tools that help you reduce churn and grow your business faster:   Recover: Prevent failed charges and keep your hard-earned revenue with our 100% automated toolkit.   Cancellation insights: Learn exactly why your customers cancel, calculate lost revenue by cancellation reason, and send automated emails to win customers back.  Flightpath: Plan for the future with flexible financial modeling tools built for growing SaaS companies.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner {
  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_SYMBOL_RIGHT = "symbol_right";
  @SerializedName(SERIALIZED_NAME_SYMBOL_RIGHT)
  private Boolean symbolRight = true;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount = 0;

  public SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner() {
  }

  public SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner symbol(String symbol) {
    
    
    
    
    this.symbol = symbol;
    return this;
  }

   /**
   * Get symbol
   * @return symbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "$", value = "")

  public String getSymbol() {
    return symbol;
  }


  public void setSymbol(String symbol) {
    
    
    
    this.symbol = symbol;
  }


  public SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner symbolRight(Boolean symbolRight) {
    
    
    
    
    this.symbolRight = symbolRight;
    return this;
  }

   /**
   * Get symbolRight
   * @return symbolRight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "")

  public Boolean getSymbolRight() {
    return symbolRight;
  }


  public void setSymbolRight(Boolean symbolRight) {
    
    
    
    this.symbolRight = symbolRight;
  }


  public SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner amount(Integer amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1000", value = "")

  public Integer getAmount() {
    return amount;
  }


  public void setAmount(Integer amount) {
    
    
    
    this.amount = amount;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner instance itself
   */
  public SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner sourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner = (SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner) o;
    return Objects.equals(this.currency, sourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner.currency) &&
        Objects.equals(this.symbol, sourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner.symbol) &&
        Objects.equals(this.symbolRight, sourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner.symbolRight) &&
        Objects.equals(this.amount, sourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner.amount)&&
        Objects.equals(this.additionalProperties, sourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, symbol, symbolRight, amount, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    symbolRight: ").append(toIndentedString(symbolRight)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currency");
    openapiFields.add("symbol");
    openapiFields.add("symbol_right");
    openapiFields.add("amount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner is not found in the empty JSON string", SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner>() {
           @Override
           public void write(JsonWriter out, SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner
  * @throws IOException if the JSON string is invalid with respect to SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner
  */
  public static SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner.class);
  }

 /**
  * Convert an instance of SourceGetCustomerDetailsResponseCustomerCurrentPlansInnerAmountsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

