/*
 * Production
 * Baremetrics provides real-time subscription metrics for teams built with Stripe, Shopify Partners, Braintree, Recurly, Chargebee, Google Play, and App Store Connect.   In addition to metrics, Baremetrics provides tools that help you reduce churn and grow your business faster:   Recover: Prevent failed charges and keep your hard-earned revenue with our 100% automated toolkit.   Cancellation insights: Learn exactly why your customers cancel, calculate lost revenue by cancellation reason, and send automated emails to win customers back.  Flightpath: Plan for the future with flexible financial modeling tools built for growing SaaS companies.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.SourceCancelSubscriptionRequest;
import com.konfigthis.client.model.SourceCancelSubscriptionResponse;
import com.konfigthis.client.model.SourceCreateChargeOneOffRequest;
import com.konfigthis.client.model.SourceCreateCustomerRecordRequest;
import com.konfigthis.client.model.SourceCreateCustomerRecordResponse;
import com.konfigthis.client.model.SourceCreateOneOffRefundRequest;
import com.konfigthis.client.model.SourceCreatePlanRequest;
import com.konfigthis.client.model.SourceCreatePlanResponse;
import com.konfigthis.client.model.SourceCreateSubscriptionRequest;
import com.konfigthis.client.model.SourceCreateSubscriptionRequestAddonsInner;
import com.konfigthis.client.model.SourceCreateSubscriptionResponse;
import com.konfigthis.client.model.SourceGetCustomerDetailsResponse;
import com.konfigthis.client.model.SourceGetCustomerListResponse;
import com.konfigthis.client.model.SourceGetPlanResponse;
import com.konfigthis.client.model.SourceGetPlansListResponse;
import com.konfigthis.client.model.SourceGetRefundDetailsResponse;
import com.konfigthis.client.model.SourceGetRefundsResponse;
import com.konfigthis.client.model.SourceListCustomerEventsResponse;
import com.konfigthis.client.model.SourceListSourcesResponse;
import com.konfigthis.client.model.SourceUpdateCustomerInformationRequest;
import com.konfigthis.client.model.SourceUpdateCustomerInformationResponse;
import com.konfigthis.client.model.SourceUpdatePlanRequest;
import com.konfigthis.client.model.SourceUpdatePlanResponse;
import com.konfigthis.client.model.SourceUpdateSubscriptionRequest;
import com.konfigthis.client.model.SourceUpdateSubscriptionResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SourceApi
 */
@Disabled
public class SourceApiTest {

    private static SourceApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new SourceApi(apiClient);
    }

    /**
     * Cancel Subscription
     *
     * This endpoint allows you to cancel a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelSubscriptionTest() throws ApiException {
        OffsetDateTime canceledAt = null;
        String subscriptionOid = null;
        String sourceId = null;
        SourceCancelSubscriptionResponse response = api.cancelSubscription(canceledAt, subscriptionOid, sourceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Charge
     *
     * Create \&quot;One-Off\&quot; charges that are not linked to a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChargeOneOffTest() throws ApiException {
        String oid = null;
        Integer amount = null;
        String currency = null;
        String customerOid = null;
        String sourceId = null;
        OffsetDateTime created = null;
        String status = null;
        Integer fee = null;
        String subscriptionOid = null;
        String response = api.createChargeOneOff(oid, amount, currency, customerOid, sourceId)
                .created(created)
                .status(status)
                .fee(fee)
                .subscriptionOid(subscriptionOid)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Customer
     *
     * This endpoint allows you to create a customer record. After you create the record, you will be able to create a [Subscription](https://developers.baremetrics.com/reference/introduction)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomerRecordTest() throws ApiException {
        String oid = null;
        String sourceId = null;
        String name = null;
        String notes = null;
        String email = null;
        OffsetDateTime created = null;
        SourceCreateCustomerRecordResponse response = api.createCustomerRecord(oid, sourceId)
                .name(name)
                .notes(notes)
                .email(email)
                .created(created)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Refund
     *
     * Create \&quot;One-Off\&quot; refunds that are not linked to a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOneOffRefundTest() throws ApiException {
        String oid = null;
        Integer amount = null;
        String currency = null;
        String customerOid = null;
        String chargeOid = null;
        String sourceId = null;
        OffsetDateTime created = null;
        String response = api.createOneOffRefund(oid, amount, currency, customerOid, chargeOid, sourceId)
                .created(created)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Plan
     *
     * Create a plan for use when [creating](https://developers.baremetrics.com/reference/introduction) or [updating](https://developers.baremetrics.com/reference/introduction) subscriptions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPlanTest() throws ApiException {
        String oid = null;
        String name = null;
        String currency = null;
        Integer amount = null;
        String interval = null;
        Integer intervalCount = null;
        String sourceId = null;
        Integer trialDuration = null;
        String trialDurationUnit = null;
        SourceCreatePlanResponse response = api.createPlan(oid, name, currency, amount, interval, intervalCount, sourceId)
                .trialDuration(trialDuration)
                .trialDurationUnit(trialDurationUnit)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Subscription
     *
     * This endpoint allows you to create a Subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSubscriptionTest() throws ApiException {
        String oid = null;
        OffsetDateTime startedAt = null;
        String planOid = null;
        String customerOid = null;
        String sourceId = null;
        OffsetDateTime canceledAt = null;
        List<SourceCreateSubscriptionRequestAddonsInner> addons = null;
        Integer quantity = null;
        Integer discount = null;
        SourceCreateSubscriptionResponse response = api.createSubscription(oid, startedAt, planOid, customerOid, sourceId)
                .canceledAt(canceledAt)
                .addons(addons)
                .quantity(quantity)
                .discount(discount)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Customer
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCustomerTest() throws ApiException {
        String oid = null;
        String sourceId = null;
        Object response = api.deleteCustomer(oid, sourceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Plan
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePlanTest() throws ApiException {
        String oid = null;
        String sourceId = null;
        Object response = api.deletePlan(oid, sourceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Show Charge
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChargeDetailsTest() throws ApiException {
        String sourceId = null;
        String oid = null;
        String response = api.getChargeDetails(sourceId, oid)
                .execute();
        // TODO: test validations
    }

    /**
     * List Charges
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChargeListTest() throws ApiException {
        String sourceId = null;
        OffsetDateTime start = null;
        OffsetDateTime end = null;
        String subscriptionOid = null;
        String customerOid = null;
        String response = api.getChargeList(sourceId)
                .start(start)
                .end(end)
                .subscriptionOid(subscriptionOid)
                .customerOid(customerOid)
                .execute();
        // TODO: test validations
    }

    /**
     * Show Customer
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomerDetailsTest() throws ApiException {
        String oid = null;
        String sourceId = null;
        SourceGetCustomerDetailsResponse response = api.getCustomerDetails(oid, sourceId)
                .execute();
        // TODO: test validations
    }

    /**
     * List Customers
     *
     * Fetch a list of all customers on your account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomerListTest() throws ApiException {
        String sourceId = null;
        String search = null;
        String sort = null;
        String order = null;
        SourceGetCustomerListResponse response = api.getCustomerList(sourceId)
                .search(search)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Show Event
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventByIdTest() throws ApiException {
        String sourceId = null;
        String id = null;
        String response = api.getEventById(sourceId, id)
                .execute();
        // TODO: test validations
    }

    /**
     * List Events
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventsTest() throws ApiException {
        String sourceId = null;
        String liveStream = null;
        OffsetDateTime start = null;
        OffsetDateTime end = null;
        String response = api.getEvents(sourceId)
                .liveStream(liveStream)
                .start(start)
                .end(end)
                .execute();
        // TODO: test validations
    }

    /**
     * Show Plan
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlanTest() throws ApiException {
        String oid = null;
        String sourceId = null;
        SourceGetPlanResponse response = api.getPlan(oid, sourceId)
                .execute();
        // TODO: test validations
    }

    /**
     * List Plans
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlansListTest() throws ApiException {
        String sourceId = null;
        String search = null;
        SourceGetPlansListResponse response = api.getPlansList(sourceId)
                .search(search)
                .execute();
        // TODO: test validations
    }

    /**
     * Show Refund
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRefundDetailsTest() throws ApiException {
        String sourceId = null;
        String oid = null;
        SourceGetRefundDetailsResponse response = api.getRefundDetails(sourceId, oid)
                .execute();
        // TODO: test validations
    }

    /**
     * List Refunds
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRefundsTest() throws ApiException {
        String sourceId = null;
        OffsetDateTime start = null;
        OffsetDateTime end = null;
        SourceGetRefundsResponse response = api.getRefunds(sourceId)
                .start(start)
                .end(end)
                .execute();
        // TODO: test validations
    }

    /**
     * Show Subscription
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionTest() throws ApiException {
        String oid = null;
        String sourceId = null;
        String response = api.getSubscription(oid, sourceId)
                .execute();
        // TODO: test validations
    }

    /**
     * List Subscriptions
     *
     * Get all subscriptions linked to this API Key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionsTest() throws ApiException {
        String sourceId = null;
        String customerOid = null;
        String order = null;
        String response = api.getSubscriptions(sourceId)
                .customerOid(customerOid)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * List Customer Events
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCustomerEventsTest() throws ApiException {
        String sourceId = null;
        String oid = null;
        SourceListCustomerEventsResponse response = api.listCustomerEvents(sourceId, oid)
                .execute();
        // TODO: test validations
    }

    /**
     * List Sources
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSourcesTest() throws ApiException {
        SourceListSourcesResponse response = api.listSources()
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Charge
     *
     * Delete \&quot;One-Off\&quot; charges that are not linked to a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeOneOffChargeTest() throws ApiException {
        String sourceId = null;
        String oid = null;
        Object response = api.removeOneOffCharge(sourceId, oid)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Refund
     *
     * Delete \&quot;One-Off\&quot; refunds that are not linked to a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeOneOffRefundTest() throws ApiException {
        String sourceId = null;
        String oid = null;
        Object response = api.removeOneOffRefund(sourceId, oid)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Subscription
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeSubscriptionTest() throws ApiException {
        String oid = null;
        String sourceId = null;
        Object response = api.removeSubscription(oid, sourceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Customer
     *
     * This endpoint allows you to update the basic information stored on a Customer, such as first name, last name and notes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomerInformationTest() throws ApiException {
        String customerOid = null;
        String sourceId = null;
        String name = null;
        String notes = null;
        OffsetDateTime created = null;
        String email = null;
        SourceUpdateCustomerInformationResponse response = api.updateCustomerInformation(customerOid, sourceId)
                .name(name)
                .notes(notes)
                .created(created)
                .email(email)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Plan
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePlanTest() throws ApiException {
        String name = null;
        String planOid = null;
        String sourceId = null;
        SourceUpdatePlanResponse response = api.updatePlan(name, planOid, sourceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Subscription
     *
     * This allows you to update a Subscription, such as changing plans and addons.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriptionTest() throws ApiException {
        String planOid = null;
        String subscriptionOid = null;
        String sourceId = null;
        OffsetDateTime occurredAt = null;
        List<SourceCreateSubscriptionRequestAddonsInner> addons = null;
        Integer quantity = null;
        Integer discount = null;
        SourceUpdateSubscriptionResponse response = api.updateSubscription(planOid, subscriptionOid, sourceId)
                .occurredAt(occurredAt)
                .addons(addons)
                .quantity(quantity)
                .discount(discount)
                .execute();
        // TODO: test validations
    }

}
